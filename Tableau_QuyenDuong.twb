<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20214.22.0213.1102                               -->
<workbook original-version='18.1' source-build='2021.4.4 (20214.22.0213.1102)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Happiness score Parameter' datatype='real' name='[Happiness score Parameter]' param-domain-type='range' role='measure' type='quantitative' value='2.4038000106811523'>
        <calculation class='tableau' formula='2.4038000106811523' />
        <range granularity='5.0' max='7.8210000991821289' min='2.4038000106811523' />
      </column>
    </datasource>
    <datasource caption='Sheet1 (DataPanelWHR2021C2)' inline='true' name='federated.017x6fs12pcyc911armiv1lu1zy2' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='DataPanelWHR2021C2' name='excel-direct.0r3u50i1as7biu13v3v1r1r7twqe'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/duong/Google Drive/HSLU 3rd semester/Data Visualisation and Narration/Project/Data/DataPanelWHR2021C2.xls' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='DataForFigure2.1WHR2021C2' name='excel-direct.07zv6y40txfcl915vnb331eioe57'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/duong/Google Drive/HSLU 3rd semester/Data Visualisation and Narration/Project/Data/DataForFigure2.1WHR2021C2.xls' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0r3u50i1as7biu13v3v1r1r7twqe' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:K1950:no:A1:K1950:0' header='yes' outcome='6'>
            <column datatype='string' name='Country name' ordinal='0' />
            <column datatype='integer' name='year' ordinal='1' />
            <column datatype='real' name='Life Ladder' ordinal='2' />
            <column datatype='real' name='Log GDP per capita' ordinal='3' />
            <column datatype='real' name='Social support' ordinal='4' />
            <column datatype='real' name='Healthy life expectancy at birth' ordinal='5' />
            <column datatype='real' name='Freedom to make life choices' ordinal='6' />
            <column datatype='real' name='Generosity' ordinal='7' />
            <column datatype='real' name='Perceptions of corruption' ordinal='8' />
            <column datatype='real' name='Positive affect' ordinal='9' />
            <column datatype='real' name='Negative affect' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0r3u50i1as7biu13v3v1r1r7twqe' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:K1950:no:A1:K1950:0' header='yes' outcome='6'>
            <column datatype='string' name='Country name' ordinal='0' />
            <column datatype='integer' name='year' ordinal='1' />
            <column datatype='real' name='Life Ladder' ordinal='2' />
            <column datatype='real' name='Log GDP per capita' ordinal='3' />
            <column datatype='real' name='Social support' ordinal='4' />
            <column datatype='real' name='Healthy life expectancy at birth' ordinal='5' />
            <column datatype='real' name='Freedom to make life choices' ordinal='6' />
            <column datatype='real' name='Generosity' ordinal='7' />
            <column datatype='real' name='Perceptions of corruption' ordinal='8' />
            <column datatype='real' name='Positive affect' ordinal='9' />
            <column datatype='real' name='Negative affect' ordinal='10' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:K1950:no:A1:K1950:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country name]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Country name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Life Ladder</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Life Ladder]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Life Ladder</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Log GDP per capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Log GDP per capita]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Log GDP per capita</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Social support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Social support]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Social support</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Healthy life expectancy at birth</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Healthy life expectancy at birth]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Healthy life expectancy at birth</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Freedom to make life choices</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Freedom to make life choices]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Freedom to make life choices</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Generosity</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Generosity]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Generosity</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Perceptions of corruption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Perceptions of corruption]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Perceptions of corruption</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Positive affect</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Positive affect]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Positive affect</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Negative affect</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Negative affect]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Negative affect</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country name]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428]' role='measure' type='quantitative' />
      <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Switzerland&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_EE421CBFB5D345E3AE5F9A0FFCAB9428'>
            <properties context=''>
              <relation connection='excel-direct.0r3u50i1as7biu13v3v1r1r7twqe' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:K1950:no:A1:K1950:0' header='yes' outcome='6'>
                  <column datatype='string' name='Country name' ordinal='0' />
                  <column datatype='integer' name='year' ordinal='1' />
                  <column datatype='real' name='Life Ladder' ordinal='2' />
                  <column datatype='real' name='Log GDP per capita' ordinal='3' />
                  <column datatype='real' name='Social support' ordinal='4' />
                  <column datatype='real' name='Healthy life expectancy at birth' ordinal='5' />
                  <column datatype='real' name='Freedom to make life choices' ordinal='6' />
                  <column datatype='real' name='Generosity' ordinal='7' />
                  <column datatype='real' name='Perceptions of corruption' ordinal='8' />
                  <column datatype='real' name='Positive affect' ordinal='9' />
                  <column datatype='real' name='Negative affect' ordinal='10' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' inline='true' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Appendix_2_Data_for_Figure_2.1_latest' name='excel-direct.14vlo1q0oiopn41d2k32e0prgmz7'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/duong/Google Drive/HSLU 3rd semester/Data Visualisation and Narration/Project/Data/Appendix_2_Data_for_Figure_2.1_latest.xls' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='data_after_preprocess' name='excel-direct.0dmqedj07649e51eies8y0pzj37i'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/duong/Google Drive/HSLU 3rd semester/Data Visualisation and Narration/Project/Data/data_after_preprocess.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.14vlo1q0oiopn41d2k32e0prgmz7' name='2022' table='[&apos;2022$&apos;]' type='table'>
          <columns gridOrigin='A1:L148:no:A1:L148:0' header='yes' outcome='2'>
            <column datatype='integer' name='RANK' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='Happiness score' ordinal='2' />
            <column datatype='real' name='Whisker-high' ordinal='3' />
            <column datatype='real' name='Whisker-low' ordinal='4' />
            <column datatype='real' name='Dystopia (1.83) + residual' ordinal='5' />
            <column datatype='real' name='Explained by: GDP per capita' ordinal='6' />
            <column datatype='real' name='Explained by: Social support' ordinal='7' />
            <column datatype='real' name='Explained by: Healthy life expectancy' ordinal='8' />
            <column datatype='real' name='Explained by: Freedom to make life choices' ordinal='9' />
            <column datatype='real' name='Explained by: Generosity' ordinal='10' />
            <column datatype='real' name='Explained by: Perceptions of corruption' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.14vlo1q0oiopn41d2k32e0prgmz7' name='2022' table='[&apos;2022$&apos;]' type='table'>
          <columns gridOrigin='A1:L148:no:A1:L148:0' header='yes' outcome='2'>
            <column datatype='integer' name='RANK' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='Happiness score' ordinal='2' />
            <column datatype='real' name='Whisker-high' ordinal='3' />
            <column datatype='real' name='Whisker-low' ordinal='4' />
            <column datatype='real' name='Dystopia (1.83) + residual' ordinal='5' />
            <column datatype='real' name='Explained by: GDP per capita' ordinal='6' />
            <column datatype='real' name='Explained by: Social support' ordinal='7' />
            <column datatype='real' name='Explained by: Healthy life expectancy' ordinal='8' />
            <column datatype='real' name='Explained by: Freedom to make life choices' ordinal='9' />
            <column datatype='real' name='Explained by: Generosity' ordinal='10' />
            <column datatype='real' name='Explained by: Perceptions of corruption' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[2022]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:L148:no:A1:L148:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RANK</remote-name>
            <remote-type>20</remote-type>
            <local-name>[RANK]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>RANK</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Happiness score</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Happiness score]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Happiness score</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Whisker-high</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Whisker-high]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Whisker-high</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Whisker-low</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Whisker-low]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Whisker-low</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Dystopia (1.83) + residual</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Dystopia (1.83) + residual]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Dystopia (1.83) + residual</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Explained by: GDP per capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Explained by: GDP per capita]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Explained by: GDP per capita</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Explained by: Social support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Explained by: Social support]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Explained by: Social support</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Explained by: Healthy life expectancy</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Explained by: Healthy life expectancy]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Explained by: Healthy life expectancy</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Explained by: Freedom to make life choices</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Explained by: Freedom to make life choices]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Explained by: Freedom to make life choices</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Explained by: Generosity</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Explained by: Generosity]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Explained by: Generosity</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Explained by: Perceptions of corruption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Explained by: Perceptions of corruption]</local-name>
            <parent-name>[2022]</parent-name>
            <remote-alias>Explained by: Perceptions of corruption</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Calculation1' datatype='real' name='[Calculation_8456071277823201280]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Happiness score]' />
      </column>
      <column caption='Calculated score' datatype='real' name='[Calculation_8456071277927170051]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Explained by: Healthy life expectancy] + [Explained by: Social support]+ [Explained by: GDP per capita]+ [Explained by: Perceptions of corruption]+ [Explained by: Generosity]+ [Explained by: Freedom to make life choices]' />
      </column>
      <column caption='% freedom to make life choice' datatype='real' name='[Calculation_8456071277928759300]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Explained by: Freedom to make life choices]/[Calculation_8456071277927170051]' />
      </column>
      <column caption='% GDP per capita' datatype='real' name='[Calculation_8456071277929156613]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Explained by: GDP per capita]/ [Calculation_8456071277927170051]' />
      </column>
      <column caption='% Generousity' datatype='real' name='[Calculation_8456071277929451526]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Explained by: Generosity]/[Calculation_8456071277927170051]' />
      </column>
      <column caption='% life expectancy' datatype='real' name='[Calculation_8456071277929672711]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Explained by: Healthy life expectancy]/[Calculation_8456071277927170051]' />
      </column>
      <column caption='% Perceptions of corruption' datatype='real' name='[Calculation_8456071277930029064]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Explained by: Perceptions of corruption]/[Calculation_8456071277927170051]' />
      </column>
      <column caption='% Social support' datatype='real' name='[Calculation_8456071277930295305]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Explained by: Social support]/[Calculation_8456071277927170051]' />
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column datatype='real' name='[Dystopia (1.83) + residual]' role='measure' type='quantitative' />
      <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
      <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
      <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
      <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
      <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
      <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
      <column aggregation='None' caption='Happiness score (bin)' datatype='integer' name='[Happiness score (bin)]' role='dimension' type='quantitative'>
        <calculation class='bin' decimals='0' formula='[Happiness score]' peg='0' size='1' />
      </column>
      <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
      <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
      <column datatype='real' name='[Whisker-high]' role='measure' type='quantitative' />
      <column datatype='real' name='[Whisker-low]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='2022' datatype='table' name='[__tableau_internal_object_id__].[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]' role='measure' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_8456071277930029064]' derivation='Avg' name='[avg:Calculation_8456071277930029064:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Freedom to make life choices]' derivation='Avg' name='[avg:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: GDP per capita]' derivation='Avg' name='[avg:Explained by: GDP per capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Generosity]' derivation='Avg' name='[avg:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Healthy life expectancy]' derivation='Avg' name='[avg:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Perceptions of corruption]' derivation='Avg' name='[avg:Explained by: Perceptions of corruption:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Social support]' derivation='Avg' name='[avg:Explained by: Social support:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Happiness score]' derivation='Avg' name='[avg:Happiness score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Happiness score]' derivation='Count' name='[cnt:Happiness score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Happiness score]' derivation='Sum' name='[diff:sum:Happiness score:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Columns' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Happiness score]' derivation='Min' name='[min:Happiness score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Happiness score]' derivation='Count' name='[pcto:cnt:Happiness score:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[pcto:sum:Explained by: Freedom to make life choices:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[pcto:sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[pcto:sum:Explained by: GDP per capita:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[pcto:sum:Explained by: GDP per capita:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[pcto:sum:Explained by: Generosity:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[pcto:sum:Explained by: Generosity:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[pcto:sum:Explained by: Healthy life expectancy:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[pcto:sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[pcto:sum:Explained by: Perceptions of corruption:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[pcto:sum:Explained by: Perceptions of corruption:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Social support]' derivation='Sum' name='[pcto:sum:Explained by: Social support:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[Explained by: Social support]' derivation='Sum' name='[pcto:sum:Explained by: Social support:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Calculation_8456071277823201280]' derivation='Sum' name='[sum:Calculation_8456071277823201280:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_8456071277928759300]' derivation='Sum' name='[sum:Calculation_8456071277928759300:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_8456071277929156613]' derivation='Sum' name='[sum:Calculation_8456071277929156613:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_8456071277929451526]' derivation='Sum' name='[sum:Calculation_8456071277929451526:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_8456071277929672711]' derivation='Sum' name='[sum:Calculation_8456071277929672711:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_8456071277930029064]' derivation='Sum' name='[sum:Calculation_8456071277930029064:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_8456071277930295305]' derivation='Sum' name='[sum:Calculation_8456071277930295305:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Dystopia (1.83) + residual]' derivation='Sum' name='[sum:Dystopia (1.83) + residual:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
      <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
      <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
      <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
      <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[sum:Explained by: Perceptions of corruption:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[sum:Explained by: Perceptions of corruption:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
      <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
      <column-instance column='[Happiness score]' derivation='Sum' name='[sum:Happiness score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[RANK]' derivation='Sum' name='[sum:RANK:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Whisker-high]' derivation='Sum' name='[sum:Whisker-high:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Whisker-low]' derivation='Sum' name='[sum:Whisker-low:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guatemala*&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kuwait*&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hong Kong S.A.R. of China&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Luxembourg*&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rwanda*&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eswatini, Kingdom of*&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Madagascar*&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Comoros*&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Taiwan Province of China&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turkmenistan*&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Liberia*&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Niger*&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lesotho*&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;North Cyprus*&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Belarus*&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chad*&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Botswana*&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Libya*&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan*&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gambia*&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritania*&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Palestinian Territories*&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;xx&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yemen*&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793]&quot;</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Freedom to make life choices:qk:2]&quot;</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Freedom to make life choices:qk]&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Healthy life expectancy:qk:2]&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Healthy life expectancy:qk]&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Perceptions of corruption:qk:2]&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Perceptions of corruption:qk]&quot;</bucket>
            </map>
            <map to='#676593'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Explained by: GDP per capita:qk]&quot;</bucket>
            </map>
            <map to='#676593'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929156613:qk]&quot;</bucket>
            </map>
            <map to='#676593'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]&quot;</bucket>
            </map>
            <map to='#676593'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:vtsum:qk]&quot;</bucket>
            </map>
            <map to='#688aa7'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Explained by: Healthy life expectancy:qk]&quot;</bucket>
            </map>
            <map to='#688aa7'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277928759300:qk]&quot;</bucket>
            </map>
            <map to='#688aa7'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]&quot;</bucket>
            </map>
            <map to='#688aa7'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:vtsum:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Whisker-high:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Happiness score:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[cnt:Happiness score:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[diff:sum:Happiness score:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[min:Happiness score:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:cnt:Happiness score:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]&quot;</bucket>
            </map>
            <map to='#923b39'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929451526:qk]&quot;</bucket>
            </map>
            <map to='#9cd0b5'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Explained by: Freedom to make life choices:qk]&quot;</bucket>
            </map>
            <map to='#9cd0b5'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]&quot;</bucket>
            </map>
            <map to='#9cd0b5'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:vtsum:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277823201280:qk]&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Generosity:qk:2]&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Generosity:qk]&quot;</bucket>
            </map>
            <map to='#ba5963'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Explained by: Social support:qk]&quot;</bucket>
            </map>
            <map to='#ba5963'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]&quot;</bucket>
            </map>
            <map to='#ba5963'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:vtsum:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Whisker-low:qk]&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Social support:qk:2]&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: Social support:qk]&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Dystopia (1.83) + residual:qk]&quot;</bucket>
            </map>
            <map to='#d9674a'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Explained by: Generosity:qk]&quot;</bucket>
            </map>
            <map to='#d9674a'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]&quot;</bucket>
            </map>
            <map to='#d9674a'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:vtsum:qk]&quot;</bucket>
            </map>
            <map to='#dc7f70'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930295305:qk]&quot;</bucket>
            </map>
            <map to='#f0d0ce'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Calculation_8456071277930029064:qk]&quot;</bucket>
            </map>
            <map to='#f0d0ce'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: GDP per capita:qk:2]&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:sum:Explained by: GDP per capita:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:RANK:qk]&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929672711:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[__tableau_internal_object_id__].[cnt:2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E:qk]&quot;</bucket>
            </map>
            <map to='#ffc7bf'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Explained by: Perceptions of corruption:qk]&quot;</bucket>
            </map>
            <map to='#ffc7bf'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk]&quot;</bucket>
            </map>
            <map to='#ffc7bf'>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:vtsum:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[none:Country:nk]' palette='Flags' type='shape'>
            <map to='Flags/afghanistan.png'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='Flags/botswana.png'>
              <bucket>&quot;Botswana*&quot;</bucket>
            </map>
            <map to='Flags/denmark.png'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='Flags/finland.png'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='Flags/iceland.png'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='Flags/israel.png'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='Flags/lebanon.png'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='Flags/lesotho.png'>
              <bucket>&quot;Lesotho*&quot;</bucket>
            </map>
            <map to='Flags/luxembourg.png'>
              <bucket>&quot;Luxembourg*&quot;</bucket>
            </map>
            <map to='Flags/malawi.png'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='Flags/netherlands.png'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='Flags/new-zealand.png'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='Flags/norway.png'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='Flags/rwanda.png'>
              <bucket>&quot;Rwanda*&quot;</bucket>
            </map>
            <map to='Flags/sierra-leone.png'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='Flags/sweden.png'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='Flags/switzerland.png'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='Flags/tanzania.png'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='Flags/zambia.png'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='Flags/zimbabwe.png'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Kuwait*&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Turkmenistan*&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;xx&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Belarus*&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Liberia*&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Yemen*&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Azerbaijan*&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Eswatini, Kingdom of*&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Taiwan Province of China&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Mauritania*&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Chad*&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Hong Kong S.A.R. of China&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Gambia*&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Libya*&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Niger*&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Madagascar*&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;North Cyprus*&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Comoros*&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Guatemala*&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Palestinian Territories*&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Switzerland&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='RANK' />
        <field-sort-custom-order field='Country' />
        <field-sort-custom-order field='Happiness score' />
        <field-sort-custom-order field='Calculation_8456071277823201280' />
        <field-sort-custom-order field='Whisker-high' />
        <field-sort-custom-order field='Whisker-low' />
        <field-sort-custom-order field='Dystopia (1.83) + residual' />
        <field-sort-custom-order field='Explained by: GDP per capita' />
        <field-sort-custom-order field='Explained by: Social support' />
        <field-sort-custom-order field='Explained by: Healthy life expectancy' />
        <field-sort-custom-order field='Calculation_8456071277927170051' />
        <field-sort-custom-order field='Calculation_8456071277930295305' />
        <field-sort-custom-order field='Calculation_8456071277930029064' />
        <field-sort-custom-order field='Calculation_8456071277929672711' />
        <field-sort-custom-order field='Calculation_8456071277929451526' />
        <field-sort-custom-order field='Calculation_8456071277929156613' />
        <field-sort-custom-order field='Calculation_8456071277928759300' />
        <field-sort-custom-order field='Explained by: Freedom to make life choices' />
        <field-sort-custom-order field='Explained by: Generosity' />
        <field-sort-custom-order field='Explained by: Perceptions of corruption' />
      </field-sort-info>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='2022' id='2022_92FAD7DB3DEB4B0795B98FC8BDF69C2E'>
            <properties context=''>
              <relation connection='excel-direct.14vlo1q0oiopn41d2k32e0prgmz7' name='2022' table='[&apos;2022$&apos;]' type='table'>
                <columns gridOrigin='A1:L148:no:A1:L148:0' header='yes' outcome='2'>
                  <column datatype='integer' name='RANK' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='Happiness score' ordinal='2' />
                  <column datatype='real' name='Whisker-high' ordinal='3' />
                  <column datatype='real' name='Whisker-low' ordinal='4' />
                  <column datatype='real' name='Dystopia (1.83) + residual' ordinal='5' />
                  <column datatype='real' name='Explained by: GDP per capita' ordinal='6' />
                  <column datatype='real' name='Explained by: Social support' ordinal='7' />
                  <column datatype='real' name='Explained by: Healthy life expectancy' ordinal='8' />
                  <column datatype='real' name='Explained by: Freedom to make life choices' ordinal='9' />
                  <column datatype='real' name='Explained by: Generosity' ordinal='10' />
                  <column datatype='real' name='Explained by: Perceptions of corruption' ordinal='11' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Bubbles'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Avg' name='[avg:Happiness score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Happiness score:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Happiness score:qk]' num-steps='5' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Happiness score:qk]' />
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
              <color column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Happiness score:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run fontsize='6'>&lt;</run>
                <run fontsize='6'>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</run>
                <run fontsize='6'>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{239B8838-DA14-4B71-BDB7-B45B3BE0D032}' />
    </worksheet>
    <worksheet name='Histogram'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column aggregation='None' caption='Happiness score (bin)' datatype='integer' name='[Happiness score (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='0' formula='[Happiness score]' peg='0' size='1' />
            </column>
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Count' name='[cnt:Happiness score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Happiness score (bin)]' derivation='None' name='[none:Happiness score (bin):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Happiness score (bin)]' derivation='None' name='[none:Happiness score (bin):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Happiness score (bin):ok]' />
              <groupfilter function='member' level='[none:Happiness score (bin):ok]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[cnt:Happiness score:qk]' scope='rows' value='Count of countries' />
            <encoding attr='space' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):qk]' field-type='quantitative' max='8.3000000000000007' min='0.0' range-type='fixed' scope='cols' type='space' />
            <format attr='stroke-color' value='#f5f5f500' />
            <format attr='tick-color' value='#f5f5f546' />
          </style-rule>
          <style-rule element='header'>
            <format attr='background-color' value='#f3f2f1' />
            <format attr='background-color' data-class='total' value='#f3f2f1' />
            <format attr='band-color' scope='rows' value='#f3f2f1' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='cols' value='#000000' />
            <format attr='background-color' value='#f3f2f1' />
            <format attr='band-color' scope='rows' value='#f3f2f1' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
            <format attr='band-size' scope='cols' value='1' />
            <format attr='band-size' scope='rows' value='1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='15' />
          </style-rule>
          <style-rule element='dropline'>
            <format attr='stroke-color' value='#7f7f7f56' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='dotted' />
            <format attr='stroke-color' value='#89898944' />
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='stroke-color' value='#f3f2f1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing custom-mark-size-in-axis-units='1.0' mark-alignment='mark-alignment-left' mark-sizing-setting='marks-scaling-on' use-custom-mark-size='false' />
            <encodings>
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[cnt:Happiness score:qk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='15' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#dc7f70' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[cnt:Happiness score:qk]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):qk]</cols>
      </table>
      <simple-id uuid='{533549AA-37AB-439B-9442-54D198BE13A0}' />
    </worksheet>
    <worksheet name='Lollipop least 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[RANK]' derivation='None' name='[none:RANK:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[sum:Explained by: Perceptions of corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Sum' name='[sum:Happiness score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]' included-values='in-range'>
            <min>137</min>
            <max>147</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' field-type='quantitative' max='8.2256307018230039' min='0.0' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='1' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' field-type='quantitative' fold='true' major-origin='0.0' major-show='false' major-spacing='1.0' minor-origin='0.0' minor-show='false' minor-spacing='0.10000000000000001' scope='rows' synchronized='true' type='space' />
            <format attr='auto-subtitle' class='1' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' scope='rows' value='true' />
            <format attr='title' class='1' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' scope='rows' value='' />
            <format attr='display' class='1' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='80' />
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='n#,##0.00;-#,##0.00' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='bold' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='#000000' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='10' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='bold' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='#000000' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='bold' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='#000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='12' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='5.9130978584289551' />
                <format attr='mark-color' value='#626199' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <shape column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='1.7031491994857788' />
                <format attr='mark-color' value='#626199' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' />
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true'>&lt;</run>
                <run bold='true'>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]</run>
                <run bold='true'>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='wrap' value='on' />
                <format attr='vertical-align' value='center' />
                <format attr='text-orientation' value='-90' />
              </style-rule>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='user' />
                <format attr='font-size' value='8' />
                <format attr='color' value='#ffffff' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='0.46077346801757812' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-color' value='#172055' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk] + [federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk])</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</cols>
      </table>
      <simple-id uuid='{4268BE92-AC7B-4C0F-B32E-4CBA6E2E174F}' />
    </worksheet>
    <worksheet name='Lollipop top 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[RANK]' derivation='None' name='[none:RANK:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[sum:Explained by: Perceptions of corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Sum' name='[sum:Happiness score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' field-type='quantitative' max='8.2256307018230039' min='0.0' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='1' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' field-type='quantitative' fold='true' major-origin='0.0' major-show='false' major-spacing='1.0' minor-origin='0.0' minor-show='false' minor-spacing='0.10000000000000001' scope='rows' synchronized='true' type='space' />
            <format attr='auto-subtitle' class='1' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' scope='rows' value='true' />
            <format attr='title' class='1' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' scope='rows' value='' />
            <format attr='display' class='1' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='80' />
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='n#,##0.00;-#,##0.00' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='10' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='#000000' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='bold' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='bold' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='#000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='12' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='5.9130978584289551' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <shape column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='1.7031491994857788' />
                <format attr='mark-color' value='#1b1b1b' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' />
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontsize='9'>&lt;</run>
                <run bold='true' fontsize='9'>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]</run>
                <run bold='true' fontsize='9'>&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='wrap' value='on' />
                <format attr='vertical-align' value='center' />
                <format attr='text-orientation' value='-90' />
              </style-rule>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='user' />
                <format attr='font-size' value='8' />
                <format attr='color' value='#ffffff' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='0.46077346801757812' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-color' value='#c85945' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk] + [federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk])</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</cols>
      </table>
      <simple-id uuid='{825BE25A-D336-4604-9F1D-2572A73686CE}' />
    </worksheet>
    <worksheet name='Normalized stacked bar least 10 - factors'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column caption='Calculated score' datatype='real' name='[Calculation_8456071277927170051]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Healthy life expectancy] + [Explained by: Social support]+ [Explained by: GDP per capita]+ [Explained by: Perceptions of corruption]+ [Explained by: Generosity]+ [Explained by: Freedom to make life choices]' />
            </column>
            <column caption='% freedom to make life choice' datatype='real' name='[Calculation_8456071277928759300]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Freedom to make life choices]/[Calculation_8456071277927170051]' />
            </column>
            <column caption='% GDP per capita' datatype='real' name='[Calculation_8456071277929156613]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: GDP per capita]/ [Calculation_8456071277927170051]' />
            </column>
            <column caption='% Generousity' datatype='real' name='[Calculation_8456071277929451526]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Generosity]/[Calculation_8456071277927170051]' />
            </column>
            <column caption='% life expectancy' datatype='real' name='[Calculation_8456071277929672711]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Healthy life expectancy]/[Calculation_8456071277927170051]' />
            </column>
            <column caption='% Perceptions of corruption' datatype='real' name='[Calculation_8456071277930029064]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Perceptions of corruption]/[Calculation_8456071277927170051]' />
            </column>
            <column caption='% Social support' datatype='real' name='[Calculation_8456071277930295305]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Social support]/[Calculation_8456071277927170051]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[RANK]' derivation='None' name='[none:RANK:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277928759300]' derivation='Sum' name='[sum:Calculation_8456071277928759300:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277929156613]' derivation='Sum' name='[sum:Calculation_8456071277929156613:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277929451526]' derivation='Sum' name='[sum:Calculation_8456071277929451526:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277929672711]' derivation='Sum' name='[sum:Calculation_8456071277929672711:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277930029064]' derivation='Sum' name='[sum:Calculation_8456071277930029064:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277930295305]' derivation='Sum' name='[sum:Calculation_8456071277930295305:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929156613:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929451526:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930295305:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277928759300:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929672711:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929156613:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930295305:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929672711:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277928759300:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929451526:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]' included-values='in-range'>
            <min>136</min>
            <max>146</max>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' scope='cols' value='Percentage' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='p0.0%' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='p0%' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' />
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='9' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{845212EF-F867-4553-8942-3E8BBDFF9557}' />
    </worksheet>
    <worksheet name='Normalized stacked bar top 10 - factors'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column caption='Calculated score' datatype='real' name='[Calculation_8456071277927170051]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Healthy life expectancy] + [Explained by: Social support]+ [Explained by: GDP per capita]+ [Explained by: Perceptions of corruption]+ [Explained by: Generosity]+ [Explained by: Freedom to make life choices]' />
            </column>
            <column caption='% freedom to make life choice' datatype='real' name='[Calculation_8456071277928759300]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Freedom to make life choices]/[Calculation_8456071277927170051]' />
            </column>
            <column caption='% GDP per capita' datatype='real' name='[Calculation_8456071277929156613]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: GDP per capita]/ [Calculation_8456071277927170051]' />
            </column>
            <column caption='% Generousity' datatype='real' name='[Calculation_8456071277929451526]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Generosity]/[Calculation_8456071277927170051]' />
            </column>
            <column caption='% life expectancy' datatype='real' name='[Calculation_8456071277929672711]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Healthy life expectancy]/[Calculation_8456071277927170051]' />
            </column>
            <column caption='% Perceptions of corruption' datatype='real' name='[Calculation_8456071277930029064]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Perceptions of corruption]/[Calculation_8456071277927170051]' />
            </column>
            <column caption='% Social support' datatype='real' name='[Calculation_8456071277930295305]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Social support]/[Calculation_8456071277927170051]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[RANK]' derivation='None' name='[none:RANK:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277928759300]' derivation='Sum' name='[sum:Calculation_8456071277928759300:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277929156613]' derivation='Sum' name='[sum:Calculation_8456071277929156613:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277929451526]' derivation='Sum' name='[sum:Calculation_8456071277929451526:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277929672711]' derivation='Sum' name='[sum:Calculation_8456071277929672711:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277930029064]' derivation='Sum' name='[sum:Calculation_8456071277930029064:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277930295305]' derivation='Sum' name='[sum:Calculation_8456071277930295305:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929156613:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929451526:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930295305:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277928759300:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929672711:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929156613:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930295305:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929672711:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277928759300:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277929451526:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' scope='cols' value='Percentage' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='p0.0%' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='p0%' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' />
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='9' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{0B9BA2F1-40CB-49BD-949D-BE76806B78E5}' />
    </worksheet>
    <worksheet name='Scatterplot'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[sum:Explained by: Perceptions of corruption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.22988949716091156' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.22988949716091156' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.22988949716091156' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.22988949716091156' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk] + ([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk] + ([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk] + [federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk])))</rows>
        <cols>([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk] + ([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk] + ([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk] + [federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk])))</cols>
        <show-full-range>
          <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Happiness score (bin)]</column>
        </show-full-range>
      </table>
      <simple-id uuid='{2DA830ED-CF7C-46B4-9243-A9749AB7C31D}' />
    </worksheet>
    <worksheet name='Sheet 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column aggregation='None' caption='Happiness score (bin)' datatype='integer' name='[Happiness score (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='0' formula='[Happiness score]' peg='0' size='1' />
            </column>
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Count' name='[cnt:Happiness score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Happiness score (bin)]' derivation='None' name='[none:Happiness score (bin):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Happiness score]' derivation='Sum' name='[sum:Happiness score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Happiness score (bin):ok]' />
              <groupfilter function='member' level='[none:Happiness score (bin):ok]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <size column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[cnt:Happiness score:qk]' />
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):ok]</rows>
        <cols />
        <show-full-range>
          <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Happiness score (bin)]</column>
        </show-full-range>
      </table>
      <simple-id uuid='{899F60F8-6C29-45D6-9F9D-3E7E4873038B}' />
    </worksheet>
    <worksheet name='Sheet 12'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column aggregation='None' caption='Happiness score (bin)' datatype='integer' name='[Happiness score (bin)]' role='dimension' type='quantitative'>
              <calculation class='bin' decimals='0' formula='[Happiness score]' peg='0' size='1' />
            </column>
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column-instance column='[Happiness score (bin)]' derivation='None' name='[none:Happiness score (bin):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Happiness score (bin)]' derivation='None' name='[none:Happiness score (bin):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Count' name='[pcto:cnt:Happiness score:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):ok]' />
              <wedge-size column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:cnt:Happiness score:qk]' />
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):qk]' />
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:cnt:Happiness score:qk]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run fontsize='8'><![CDATA[ <[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[pcto:cnt:Happiness score:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontsize='8'><![CDATA[Group with  happiness score of approximately <[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):qk]>]]></run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{8959BB6C-6F2C-4FFF-8D2F-01322A9401B7}' />
    </worksheet>
    <worksheet name='Sheet 13'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column-instance column='[Happiness score]' derivation='Sum' name='[diff:sum:Happiness score:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Columns' type='Difference'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[diff:sum:Happiness score:qk]</cols>
      </table>
      <simple-id uuid='{1CCB183B-A5A7-4241-B2C3-90FFAC4DB47D}' />
    </worksheet>
    <worksheet name='Sheet 14'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Happiness score]' derivation='Sum' name='[sum:Happiness score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' field-type='quantitative' max='9.6440606015075634' min='2.7101279781481722' range-type='fixed' scope='cols' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <geometry column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]</cols>
      </table>
      <simple-id uuid='{A09E9A2E-4710-4396-B37F-4FFE6C51C26A}' />
    </worksheet>
    <worksheet name='Sheet 19'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{20322464-5F6F-4FA2-848A-A76046EEAC43}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[RANK]' derivation='None' name='[none:RANK:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[sum:Explained by: Perceptions of corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Norway&quot;</bucket>
              <bucket>&quot;Denmark&quot;</bucket>
              <bucket>&quot;Sweden&quot;</bucket>
              <bucket>&quot;Luxembourg*&quot;</bucket>
              <bucket>&quot;Switzerland&quot;</bucket>
              <bucket>&quot;Finland&quot;</bucket>
              <bucket>&quot;Netherlands&quot;</bucket>
              <bucket>&quot;New Zealand&quot;</bucket>
              <bucket>&quot;Iceland&quot;</bucket>
              <bucket>&quot;Israel&quot;</bucket>
              <bucket>%all%</bucket>
              <bucket>&quot;Afghanistan&quot;</bucket>
              <bucket>&quot;Sierra Leone&quot;</bucket>
              <bucket>&quot;Malawi&quot;</bucket>
              <bucket>&quot;Lesotho*&quot;</bucket>
              <bucket>&quot;Zimbabwe&quot;</bucket>
              <bucket>&quot;Zambia&quot;</bucket>
              <bucket>&quot;Rwanda*&quot;</bucket>
              <bucket>&quot;Lebanon&quot;</bucket>
              <bucket>&quot;Tanzania&quot;</bucket>
              <bucket>&quot;Botswana*&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='quantitative' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' scope='cols' value='Score' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</rows>
        <cols total='true'>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{7EE482F4-FAF3-403E-A2F0-6D7AD944A9E7}' />
    </worksheet>
    <worksheet name='Sheet 4 (3)'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column caption='Calculated score' datatype='real' name='[Calculation_8456071277927170051]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Healthy life expectancy] + [Explained by: Social support]+ [Explained by: GDP per capita]+ [Explained by: Perceptions of corruption]+ [Explained by: Generosity]+ [Explained by: Freedom to make life choices]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' name='[Dystopia (1.83) + residual]' role='measure' type='quantitative' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[RANK]' derivation='None' name='[none:RANK:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277927170051]' derivation='Sum' name='[sum:Calculation_8456071277927170051:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Dystopia (1.83) + residual]' derivation='Sum' name='[sum:Dystopia (1.83) + residual:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
            <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
            <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
            <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
            <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[sum:Explained by: Perceptions of corruption:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
            <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:vtsum:qk]' pivot='key' type='quantitative' visual-totals='Sum' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:vtsum:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:vtsum:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:vtsum:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:vtsum:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:vtsum:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:vtsum:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Dystopia (1.83) + residual:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277927170051:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:vtsum:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:vtsum:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:vtsum:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:vtsum:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:vtsum:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:vtsum:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Norway&quot;</bucket>
              <bucket>&quot;Denmark&quot;</bucket>
              <bucket>&quot;Sweden&quot;</bucket>
              <bucket>&quot;Luxembourg*&quot;</bucket>
              <bucket>&quot;Switzerland&quot;</bucket>
              <bucket>&quot;Finland&quot;</bucket>
              <bucket>&quot;Netherlands&quot;</bucket>
              <bucket>&quot;New Zealand&quot;</bucket>
              <bucket>&quot;Iceland&quot;</bucket>
              <bucket>&quot;Israel&quot;</bucket>
              <bucket>%all%</bucket>
              <bucket>&quot;Afghanistan&quot;</bucket>
              <bucket>&quot;Sierra Leone&quot;</bucket>
              <bucket>&quot;Malawi&quot;</bucket>
              <bucket>&quot;Lesotho*&quot;</bucket>
              <bucket>&quot;Zimbabwe&quot;</bucket>
              <bucket>&quot;Zambia&quot;</bucket>
              <bucket>&quot;Rwanda*&quot;</bucket>
              <bucket>&quot;Lebanon&quot;</bucket>
              <bucket>&quot;Tanzania&quot;</bucket>
              <bucket>&quot;Botswana*&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='quantitative' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='field-labels'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</rows>
        <cols total='true'>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</cols>
      </table>
      <simple-id uuid='{8CFB039A-69DC-4239-B38E-F08A9294382C}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Perceptions of corruption]' derivation='Sum' name='[sum:Explained by: Perceptions of corruption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.53773480653762817' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.58171272277832031' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.51574587821960449' />
              </style-rule>
            </style>
          </pane>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.44977900385856628' />
              </style-rule>
            </style>
          </pane>
          <pane id='8' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.51574587821960449' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]</rows>
        <cols>([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk] + ([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk] + ([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Perceptions of corruption:qk] + ([federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk] + [federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]))))</cols>
      </table>
      <simple-id uuid='{8759674B-1F3B-4A64-BE38-98C23AEBA078}' />
    </worksheet>
    <worksheet name='Top 10 happy countries'>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Happiness score]' derivation='Sum' name='[sum:Happiness score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' value='7' />
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='n#,##0.00;-#,##0.00' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
          <style-rule element='tooltip'>
            <format attr='font-size' value='7' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='user' />
                <format attr='font-size' value='8' />
                <format attr='color' value='#555555' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='1.1974033117294312' />
                <format attr='mark-color' value='#4e4d79' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]</cols>
      </table>
      <simple-id uuid='{A1BF958F-53AB-471E-9958-2E84ABA7F41A}' />
    </worksheet>
    <worksheet name='World map'>
      <layout-options>
        <title>
          <formatted-text />
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' name='[Happiness score]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Happiness score]' derivation='Sum' name='[sum:Happiness score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' num-steps='5' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='8' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' value='Happiness score' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='light-admin-0-boundaries-bg' value='true' />
            <format attr='enabled' id='light-admin-0-boundaries' value='true' />
            <format attr='enabled' id='light-admin-0-boundaries-dispute' value='true' />
            <format attr='enabled' id='light-admin-0-label-5th-tier' value='true' />
            <format attr='enabled' id='light-admin-0-label-4th-tier' value='true' />
            <format attr='enabled' id='light-admin-0-label-3rd-tier' value='true' />
            <format attr='enabled' id='light-admin-0-label-2nd-tier' value='true' />
            <format attr='enabled' id='light-admin-0-label-1st-tier' value='true' />
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
            <format attr='enabled' id='background' value='false' />
            <format attr='enabled' id='barrier_line-land-polygon' value='false' />
            <format attr='enabled' id='barrier_line-land-line' value='false' />
            <format attr='enabled' id='national_park' value='false' />
            <format attr='enabled' id='pitch' value='false' />
            <format attr='enabled' id='industrial' value='false' />
            <format attr='enabled' id='built-up-area' value='false' />
            <format attr='enabled' id='water' value='false' />
            <format attr='enabled' id='waterway-river-canal' value='false' />
            <format attr='enabled' id='aeroway-polygon' value='false' />
            <format attr='enabled' id='aeroway-runway' value='false' />
            <format attr='enabled' id='aeroway-taxiway' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='light' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' />
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' />
              <color column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' />
              <geometry column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='5' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Latitude (generated)]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{CBDDC49A-E6A3-4E51-BD23-07125B007A1D}' />
    </worksheet>
    <worksheet name='stacked bar least 10 '>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column caption='Calculated score' datatype='real' name='[Calculation_8456071277927170051]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Healthy life expectancy] + [Explained by: Social support]+ [Explained by: GDP per capita]+ [Explained by: Perceptions of corruption]+ [Explained by: Generosity]+ [Explained by: Freedom to make life choices]' />
            </column>
            <column caption='% Perceptions of corruption' datatype='real' name='[Calculation_8456071277930029064]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Perceptions of corruption]/[Calculation_8456071277927170051]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' name='[Dystopia (1.83) + residual]' role='measure' type='quantitative' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[RANK]' derivation='None' name='[none:RANK:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277930029064]' derivation='Sum' name='[sum:Calculation_8456071277930029064:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Dystopia (1.83) + residual]' derivation='Sum' name='[sum:Dystopia (1.83) + residual:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Dystopia (1.83) + residual:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Zambia&quot;</bucket>
              <bucket>&quot;India&quot;</bucket>
              <bucket>&quot;Malawi&quot;</bucket>
              <bucket>&quot;Sierra Leone&quot;</bucket>
              <bucket>&quot;Tanzania&quot;</bucket>
              <bucket>&quot;Lesotho*&quot;</bucket>
              <bucket>&quot;Botswana*&quot;</bucket>
              <bucket>&quot;Lebanon&quot;</bucket>
              <bucket>&quot;Zimbabwe&quot;</bucket>
              <bucket>&quot;Rwanda*&quot;</bucket>
              <bucket>&quot;Afghanistan&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <filter class='quantitative' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]' included-values='in-range'>
            <min>136</min>
            <max>146</max>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' scope='cols' value='Score' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='n#,##0.00;-#,##0.00' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='bold' />
            <format attr='color' data-class='subtotal' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='#000000' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='n#,##0.00;-#,##0.00' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='bold' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='#000000' />
            <format attr='font-size' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='10' />
            <format attr='font-size' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='10' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='bold' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='#000000' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' />
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='9' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{1F9BB913-6009-4A6D-A3CB-87157B33FF53}' />
    </worksheet>
    <worksheet name='stacked bar top 10 '>
      <table>
        <view>
          <datasources>
            <datasource caption='2022 (Appendix_2_Data_for_Figure_2.1_latest)' name='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793' />
          </datasources>
          <datasource-dependencies datasource='federated.0p1h1ce0cfa3gj1ai1wnc1fkz793'>
            <column caption='Calculated score' datatype='real' name='[Calculation_8456071277927170051]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Healthy life expectancy] + [Explained by: Social support]+ [Explained by: GDP per capita]+ [Explained by: Perceptions of corruption]+ [Explained by: Generosity]+ [Explained by: Freedom to make life choices]' />
            </column>
            <column caption='% Perceptions of corruption' datatype='real' name='[Calculation_8456071277930029064]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Explained by: Perceptions of corruption]/[Calculation_8456071277927170051]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' name='[Dystopia (1.83) + residual]' role='measure' type='quantitative' />
            <column caption='Freedom to make life choices' datatype='real' name='[Explained by: Freedom to make life choices]' role='measure' type='quantitative' />
            <column caption='GDP per capita' datatype='real' name='[Explained by: GDP per capita]' role='measure' type='quantitative' />
            <column caption='Generosity' datatype='real' name='[Explained by: Generosity]' role='measure' type='quantitative' />
            <column caption='Life expectancy' datatype='real' name='[Explained by: Healthy life expectancy]' role='measure' type='quantitative' />
            <column caption='Perceptions of corruption' datatype='real' name='[Explained by: Perceptions of corruption]' role='measure' type='quantitative' />
            <column caption='Social support' datatype='real' name='[Explained by: Social support]' role='measure' type='quantitative' />
            <column caption='Rank' datatype='integer' name='[RANK]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[RANK]' derivation='None' name='[none:RANK:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8456071277930029064]' derivation='Sum' name='[sum:Calculation_8456071277930029064:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Dystopia (1.83) + residual]' derivation='Sum' name='[sum:Dystopia (1.83) + residual:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Freedom to make life choices]' derivation='Sum' name='[sum:Explained by: Freedom to make life choices:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: GDP per capita]' derivation='Sum' name='[sum:Explained by: GDP per capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Generosity]' derivation='Sum' name='[sum:Explained by: Generosity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Healthy life expectancy]' derivation='Sum' name='[sum:Explained by: Healthy life expectancy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Explained by: Social support]' derivation='Sum' name='[sum:Explained by: Social support:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Dystopia (1.83) + residual:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: GDP per capita:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Social support:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Healthy life expectancy:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Freedom to make life choices:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Calculation_8456071277930029064:qk]&quot;</bucket>
              <bucket>&quot;[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Explained by: Generosity:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;xx&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Iceland&quot;</bucket>
              <bucket>&quot;Finland&quot;</bucket>
              <bucket>&quot;Israel&quot;</bucket>
              <bucket>&quot;Denmark&quot;</bucket>
              <bucket>&quot;Switzerland&quot;</bucket>
              <bucket>&quot;Luxembourg*&quot;</bucket>
              <bucket>&quot;Netherlands&quot;</bucket>
              <bucket>&quot;Norway&quot;</bucket>
              <bucket>&quot;Sweden&quot;</bucket>
              <bucket>&quot;New Zealand&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <filter class='quantitative' column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <slices>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:RANK:qk]</column>
            <column>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' scope='cols' value='Score' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='n#,##0.00;-#,##0.00' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='bold' />
            <format attr='font-size' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='10' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='n#,##0.00;-#,##0.00' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='bold' />
            <format attr='font-size' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='10' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' value='#000000' />
            <format attr='font-weight' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='bold' />
            <format attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='#000000' />
            <format attr='font-size' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' value='10' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3f2f1' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
              <text column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]' />
              <lod column='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='9' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]</rows>
        <cols>[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{294A0337-0405-48EB-9723-138B0ABB1A15}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='768' maxwidth='1366' minheight='768' minwidth='1366' preset-index='0' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='97916' id='7' param='horz' type-v2='layout-flow' w='98828' x='586' y='1042'>
            <zone h='97916' id='5' type-v2='layout-basic' w='98828' x='586' y='1042'>
              <zone h='97916' id='3' name='World map' w='98828' x='586' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='9896' id='8' name='World map' pane-specification-id='0' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' type-v2='color' w='13982' x='83968' y='79688' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='40' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='97916' id='39' param='vert' type-v2='layout-flow' w='98828' x='586' y='1042'>
                <zone fixed-size='280' h='97916' id='3' is-fixed='true' name='World map' w='98828' x='586' y='1042'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='9896' id='8' name='World map' pane-specification-id='0' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' type-v2='color' w='13982' x='83968' y='79688'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{281A117F-32B6-4537-93C9-08A7B31E7EBB}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 2'>
      <style />
      <size maxheight='2000' maxwidth='1100' minheight='2000' minwidth='1100' preset-index='9' sizing-mode='fixed' />
      <zones />
      <devicelayouts>
        <devicelayout name='Phone'>
          <size sizing-mode='automatic' />
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{A0258E03-C709-45C1-8634-DA3C16B2428B}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='58'>
    <window class='worksheet' name='World map'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[sum:Happiness score:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{5543726C-FF61-47E9-BF95-17AEB42CDB34}' />
    </window>
    <window class='worksheet' maximized='true' name='Top 10 happy countries'>
      <cards>
        <edge name='left'>
          <strip size='196'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{D76065A7-E927-40BC-8EC3-6400BB301FF9}' />
    </window>
    <window class='worksheet' name='Scatterplot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{FCB8A1A7-14A6-4ED1-A783-11A119E0B953}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{607C5D12-2770-4CAC-BEDE-7B90E346C0C8}' />
    </window>
    <window class='worksheet' name='Lollipop top 10'>
      <cards>
        <edge name='left'>
          <strip size='169'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='181'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='296'>
            <card pane-specification-id='3' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' type='shape' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{416ACBC3-D8C5-47F2-BBF8-A93C14813E5D}' />
    </window>
    <window class='worksheet' name='Lollipop least 10'>
      <cards>
        <edge name='left'>
          <strip size='228'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='184'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='278'>
            <card pane-specification-id='3' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Country:nk]' type='shape' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{CA166278-4FB1-426A-B075-B6DC033608CA}' />
    </window>
    <window class='worksheet' name='Normalized stacked bar top 10 - factors'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='6' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{54C18302-6954-4543-89CB-A090BFB7F317}' />
    </window>
    <window class='worksheet' name='stacked bar top 10 '>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='274'>
            <card pane-specification-id='6' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{873BA4ED-3FCE-4556-98C7-AD6260576341}' />
    </window>
    <window class='worksheet' name='stacked bar least 10 '>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='6' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{A0A0CA40-D49E-472A-BB38-176925D10010}' />
    </window>
    <window class='worksheet' name='Normalized stacked bar least 10 - factors'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='6' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{7015C941-0A33-46EA-A857-C335133C280A}' />
    </window>
    <window class='worksheet' name='Sheet 4 (3)'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{12EEB27B-9A8C-410A-A33A-C3E0755D78A2}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{182A7CE2-2177-435C-B213-B4CC1FC0A5D4}' />
    </window>
    <window class='worksheet' name='Bubbles'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[avg:Happiness score:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{75BD120D-B99D-4F0E-8DB0-16021F7F7A3A}' />
    </window>
    <window class='worksheet' name='Histogram'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{4208FB74-27AF-4DC6-9EA1-FF982832B095}' />
    </window>
    <window class='worksheet' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='200'>
            <card pane-specification-id='0' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[cnt:Happiness score:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{BEA33B63-AE96-4751-BF7E-388F0D16CB86}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='World map'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{D185938A-ABF9-419D-8CF9-167D2739F816}' />
    </window>
    <window class='worksheet' name='Sheet 12'>
      <cards>
        <edge name='left'>
          <strip size='250'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='47'>
            <card type='columns' />
          </strip>
          <strip size='47'>
            <card type='rows' />
          </strip>
          <strip size='47'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='250'>
            <card pane-specification-id='0' param='[federated.0p1h1ce0cfa3gj1ai1wnc1fkz793].[none:Happiness score (bin):ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{147326F6-31E4-4AC3-94BE-2CF1E25F11D3}' />
    </window>
    <window class='worksheet' name='Sheet 13'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{8210BF24-72AE-4030-90D7-F810D2B4F129}' />
    </window>
    <window class='worksheet' name='Sheet 14'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{BF33C331-7919-4059-AECB-4781A2BF01BE}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints />
      <active id='-1' />
      <simple-id uuid='{0167BEBB-212C-4ECE-B785-6C416BA2DBC8}' />
    </window>
    <window class='worksheet' name='Sheet 19'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{FC0A0089-E233-4E4A-8DB5-DE3CCF9D4CE2}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Lollipop least 10' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Lollipop top 10' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Normalized stacked bar top 10 - factors' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 19' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Top 10 happy countries' width='192'>
      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
    </thumbnail>
  </thumbnails>
  <external>
    <shapes>
      <shape name='Flags/afghanistan.png'>
        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
        NNje88k5MTKnNNC4IO033wuwn9WueDll4zV95FZYGUNkCc9qc/xvJ3ttG1g54EkssCJrYMkQ
        m+bE6fhIc+VeVITUAQmS+8VpOytDflWBoUeyZP+SJ/d8geJ6z68K31WICTjNDrHJDslZcVKH
        JGg4MkViVgxJSKBtjUdr0/f6GVgyVPHXNaOn8GRX39YuitsGVgFYin+fJLr3uOuY5qD7hj7S
        hyRIH56s6IdcHEFSkJqbIHVAHO90f89dqd+j1OXx+sn/AAARDElEQVRReKlAqdfDG1C8IT+9
        nAbBaRLcVpf4zBhuu4ObcXAnuf65gRWcTW1LPWXokRzd3+1DraFolJUUXfbnG/jbFHj7Oucn
        gCzQWNFhmVHz+pXXLt/E1Gsnkdg7hoTxoRfBSYIzLcbfVtTeUh1dTVWVwotF1v/XpsD7jplg
        KTrsivxl269tv7L5GLZFJ/Lyq4qs+1Q3xTV2G36sCq+WWPuJbmt9XAVEGSgN6OuqF7YPrC7g
        mcoNyYxXdmmedZ/dRHFjKfDeWTVJodhVYv3lm8gus+vAaqAiy+++aXn3tl8b6d7xH7G96tHn
        wdBDWdZfsckvObDQ2jGFUp/H+s9vYvDBbPnKM0xgVFVVvYe2//pIgfUwdihFdfCg/85hXvvc
        prI0/KsVxe4Sr/1nt38+o/0zVYuciPfI9l8cKbBWAC+XfzwmKP13D7Puk93kXynfnsNqpKoU
        VhdZ+4nuCR0ma0Ig8pKou2L7L48UWC/jh5apFh4MPpRl7SVd5J8vop6FlnpK4YUiay7tYugh
        uwysOsqK9bllb5g4jRRYeeD35R+RCZTnL8SvuXAjQ3+yK/qhR3O8+q8byT6Zt7CqRg73b1t/
        tfXLI7sHW8eqSvlVRdZcuJGu6/vwcvU30/JySte3+1hzwUbyz1vpQlVSzZHX+0b6ox01yF0D
        LAcOK9ugTNl4A0rXt3rJrSgw6eJm4jNjoWx9qST1lMJLRbqu66P/N0NWwV7NRJYVnMKI/fl2
        FFg9wEPAoUBtv9NrlOag/84h8qsKtJ/fTOakNMQIpzK+jFQViv6J2Ruv6yNvG5mrmqoqwh/b
        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
      </shape>
      <shape name='Flags/botswana.png'>
        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
      </shape>
      <shape name='Flags/denmark.png'>
        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
      </shape>
      <shape name='Flags/finland.png'>
        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
      </shape>
      <shape name='Flags/iceland.png'>
        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
        zf8DS1T6A1su/MIAAAAASUVORK5CYII=
      </shape>
      <shape name='Flags/israel.png'>
        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
        6T9L+Fj5oQAAAABJRU5ErkJggg==
      </shape>
      <shape name='Flags/lebanon.png'>
        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
      </shape>
      <shape name='Flags/lesotho.png'>
        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
        AElFTkSuQmCC
      </shape>
      <shape name='Flags/luxembourg.png'>
        iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAYAAAB5fY51AAAACXBIWXMAAA7DAAAOwwHHb6hk
        AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAIABJREFUeJzt3XmYHGW5
        NvDneat6756ZnsnsyWQmCwGCESVEQVT0XMiiYU9kDQlggINBA3g4Cp7TqKhAEDUIksOBiICQ
        HPjwQ2XRI3zKvgRCErLMvu97z9JL1fP9QRIIM5m1u6t7+v79w8VMd9Wdman7qnr7rbeYAPar
        vOnnmY727tJocKiYuvqyzLZOd6Sm2aF5XSWS4ZmndC2PWOWIEc2UcNQtg8MuikY1ihgaickS
        CjOJkITCTETEDrsQ8/7/KiGbZpCuG+x2DrFdHyRN6xWRThUxWqV/oFqCg7VaaVFY5eUMUnZG
        j+l1NYrur5m/6d97rf7ZQHJgqwNA4rx4ckCfXdxZQPW9uWZ5pddWkFdGPvdx5nB4kbR25hot
        7V5m8pGmvCRkJ8OwUSTKYkpC/k5YsbDNZoqmosQcIsMYENPs17IzB1TurE5y2Sukb2Cb6h3c
        o5bMGzAXFHUO5dqaFwcC4UTkA+uhsGYgIeKa1QGHuWOXg6LRfD0388tGd9+x0X01+aRr80Wp
        EhoYypThkGZ11qlgp8Nkn6ePmBs4Eq3Qjixro1z/DmOg/+9650CTvrAsNHvr3cNMJFZnhdhC
        Yc0QQsIN37tzgVFV/8XIOzvnss1+ooRCxxtNbRkUNdLj96yUcK5/gF3ObTQ0/A/9U0fUqcK8
        lzf/3r03QAHT6ngwfenxhzwDNQXud0crK48OvfZeKTv05UZX3+epvSuHlPJJNGqjBF3GJS1m
        IV2Pkmn2awWzulRBzltmV//T+lHzaj2lRbvy7g0ErY4Ik5fef9QpZFcgYPe9UjfLGBo8QkLh
        iyPldUeQUkfQ4FCeDIeV1flSAdt0k93uDmHaa1tYsod19ajuclUML87sWLhxY8jqfDA+FFaS
        qw88kG3u3bEi8vL2E8Q0vmq0d82mcBS/t1jQddHyspuJ6e+2Ty963T579hNFmwIdVseCw8Mf
        fpLZsmKFdkLmwsXhV9870QiFL5bm9s/QcMhJpijB7ytehJhFuZzDXFLwPkXN3ztPXPLy7Hne
        nRzA2FcywQGQBCQQ0KvebJxHTW1LJRS+2KxvWSLhSJGEI7jUswDrmskOe5NWlLeHvJ4/UOGs
        l+cNFlfxS4Go1dnSHQrLQuWnr3PYsrQvRN7adRH1Bk81O3uKxTTxO0kirJRwTlYje1x/tS09
        emvkvcq/L6x4FuNdFsHBYYHai284OvrenuUSDq+NVjWWkZEm0w5SnVKizSmoJ4f9ftdnjvjz
        7Cc2brc6UrrBgZIg3asDWV3bdyylgeB3ovXNx1PEmCXRaEpO3Ex7mjKV3d6h5s1+V9nsd/Gx
        n36rbHOgx+pY6QCFFUdCxM0nX5gTEj43vLf2AgoOfV6CAy6rc0HsKI97iLzON2yLj9jiMMNb
        C1/6Qydm2McPCitO2tf+oLD/9R2XGx093zKa20tI0nwi50zHLHpRXi1nejfT0oUPzX/4V3VW
        R5qJcBDFUCAQUFeUDy0Obf/gMqO+aRX1D2SLKbjsSyeKTc7wdWtzCh5Tc4v+u2xp4Q5MjYgd
        FFYMyIoVWnWdvliC/WuNxpbl0jcwB5/2pTdWStjrbtBm5/85mu377RHXnbeTV640rM6V6nBQ
        TVPVlT/Ip7d33RCpbbqCuvv8mNwJH8dEwtmZvVpJ4UMZyxbfmbvpp81WZ0plOLimqPrqQKn5
        jzevMprbrza7+7KszgPJT2Vl9KuCWZtsi4+8d+6Td1dZnScVobAmqebUtYVGS8uF0bqWddTX
        P0cME2NUMHGaMjnDV6+VFm3UMrMeLXtpc4vVkVIJCmuCqk9e7RSPfbnxzq71ZmfvMolEUFQw
        ZWyzGZzhedM+v/hOcWc8W/bS5mGrM6UCFNYEVJ+x9nPRitrvm9UNZ0oEKyVA7LCuiZpb9Ixe
        UvjTshd//4bVeZIdDr4xVF10w1xz2wc3GvVNF8lgyI+5VBAXTEJuV49eXPCIOmb+XfOe+k2t
        1ZGSFQ7AUdSvWO8K1TaeSnVNtxrtnceIYWLVBIg7VmyqWf5dqmzOra5o1rNF72watDpTskFh
        fULliu+UGG+9/yNp6fymDIecVueB9MMOe0jlZ2/VP/uZH5Y9/csaq/MkExTWfk3L17qHKusv
        MJra7zJ7+jMJPxuwlqjszH5VnPu90JFzH1u89V6sQU84KImIqOrMK5eYexoC0eqGUykScVud
        B+Agmz6slRQ+r8+bHSj76+b3rI5jtbQurF2LV9hdGeqsyN7qO6i7b65gUB2SEDML+331PH/u
        D8KlvHXx1q1p++DYtD1A9351VTFXNfzEbGy9jDBVAVKBXRetOP8RNX/2LfP/9nBargaRdgeq
        UEDVfHHfKdG9NXeZ7V1HimA1BUghzKbKydprXzTvxrmnHPFcuq0EkVaF1Xn6uoy+3vZrwtv3
        fI8GhrJxozKkIiYS8bh6bAtL76RZeffO/9umXqszJUraHLBVZ1wx13i/YoPZ1nGuhKOYVwWp
        z6aLKpj1tPf4Y9YXpclk0xlfWBIIqMqnd37ebGl+VFo6SoQIZQUzBhOZnJvdrM2bfcG80xe/
        OtMvEWd0YdWvWO8K7dl3qVHTfKv0D+TTDP/3QtoS5fO20bzigLek4OGiZ2buDPkZewDvWhGw
        O/e+c3dkT/VqCmNuFcx8bLcPaQtLfi8l865b+OzGGfnsxBlZWDXLv10W3r5js1nf+kXcsAxp
        hVm02QX/sC876vK5T9434xYJnHEHc+XJq04ydu7bIJ09yzARFNIRMwvnZL2tL1l047y//+4f
        VueJpRlzQAsRV3/14lOi28vvMTt7F1qdB8BqKjuzyn7UgnVzX3ns2ZnyrMQZUVgvnnyyXtLl
        WxGtbnpQ+oNYYQFgP87wDvO82Vc0Zn1my1deCkStzjNdKf8Rf1Mg4J7d5vo3Y1/dAygrgENJ
        X9Ape6ofmNv61k1NawMp/+FTSp9hNa0NuIfe2Pafkb0136bhUMr/MgDixmEftC+c+xvniUWB
        ok2pO+0hZQuraW3APfTO9p9G39vzbTy5BmB8rClDX7xgo33Rgh/M2Xr3kNV5piIlC6v89HW5
        qrbqN5HdFeeTpOa/AcASzKLNn/OoeVTZ+kXPbOqwOs5kpdwYVsM51+ZQxb77Inurz0ZZAUyS
        CBtVDd9Uu6rvazjn2hyr40xWShVW24p/9YYq6zYZlbVnk2HYrM4DkJJM02bU1J8Tqqh7YM+Z
        l/usjjMZKVNYey9cO6t/T8PDkff3nUsm1rACmBZTtMiOfWfrla2/S6UzrZS4pCo/fU0uVzbe
        H62oOxNlBRBDig2ttPhpc/H8q1NhTCvpz7Ca1gbcVN92T7Sy4RsoK4AYM0UzaprOVLur765f
        sd5ldZzxJHVhNa0NuIff3fEzY1flCoxZAcSJadqMyvqLw/sqbkv2yaVJW1hNgYA7+Oo7t0a2
        fXAtVlwAiDMRju6suG7wlTcDyVxaSVkEsmKFVr0jeFO4uuFmCoWT9ocHMOPY7YN6WfHP5i/x
        /Yy3bjWsjvNJSXeGJURcUxk+P1rbhLICSLRw2G3WNn+/psY4Pxkf0pJ0hVVz0oWnhisbHjKH
        hlFWABYwh4fdkX21D9V88aKvWZ3lk5KqsCpPXnVSZFflRukNJv2nFQAzmdkbdEV2VtxTefKq
        k6zO8nFJU1jVZ19dauzct8Hs7l1gdRYAIDK7excYO/dtqFl+ZZnVWQ5IisLatSJgj763d7PZ
        2bPM6iwA8BHp7FkWeb/iwV0rAnarsxAlQWG9vXyt21n+7t1GXfOXMH0BILmICBt1LV92lb/7
        i7eXr7V8XNnSwhIKqKz6tksiu6tWk4myAkhKIhzeXbUmu77lYgkELO0MS291ufT4WScY5TX3
        0eCw38ocADAOw7CZA0PLetrCr/66ZXe9VTEsa8vGC66fY9Y0PL7/icwAkOSkfzBPmpofq7ro
        hrlWZbCksMovXpcx+Pp7d0l7dzEl4eQ0ABgVm21ds41Xtt1Vfvq6DCsCJLywhAJKr26/xmxq
        O0+SYNAfACZOiJTZ1HaO3t16tRXjWXqid1hxwgenmNvLvyfhCMoKIAVJJKpCO/bdVKlr7xPR
        c4ncd0JLo+JLa+ZIed0vaGAwO5H7BYDY4oEhv7mn+q6Kr62Zk8j9Jqyw5Li1Nmmov1W6ehYl
        402VADBxQsTS2bOIKup+tGvFioRNKk1YYVV6Bs41G1suE6waCjAjiIhmNLSucrU6zk7UPhNS
        WPWnXbnE2Fn+cwlh3ApgJpFwREV27ru96rQrlyRif3EvkJZLb/SEKmpupe4+y+ZuAEAcdffN
        Navqb2259EZPvHcV98Ia3Lb3QqO25VTBfYIAM5KIsFHTeGpwV8XF8d5XXAurcc31c6LNrXdK
        JIL1rQBmMAlHXGZdy50t374lrkvRxK2w3l6+1j300vYfm129mfHaBwAkD7Oj29f//Js/bloe
        v4dYxK2w/F29p0Wb2y8gTGEASBdsNraeHw5WnB6vHcSlsKrOvXauWVEfoOGQIx7bB4DkJIPD
        jsjumv9sWvWdknhsPy6FZe6putFs71ocj20DQHIz2zoXD7617/p4bDvmhVW1Yt0yo67lIjEF
        c64A0pCYpjLqWy6tPu/az8V62zEtlerVq52yo+IWGRjCgnwAaUwGhvzmB1X/Xr16tTOW241p
        YUmzOjNaWfcNrM0OkOZEOFpRfxY3q6/HcrMxK6w9Z15eFN2+93qJRFFWAEASiXDkvb037jnz
        8qJYbTNmhWVv7LlQOnuXxmp7AJD6zK7e420N3d+M1fZiUljNVwdKIzWN35ZIBCsxAMBBEolo
        Rl3Tuqorbo7JvcQxKayB17ZdQ73BhC7kBQCpQbr7SuT17VfHYlvTLqy21d8rMBtar5ZoFGdX
        ADCCGKZmNLddU706UDDdbU2rZGTFCq11V2vAqG48ebpBAGDmkqGQk6NhPunLn/7frR98IFPd
        zrTOsBpa7Ucb9a1rprMNAEgPRmPrmuMa6OjpbGPKhRUIBFS4t/8q6e7Jmk4AAEgTPb1+Dg5/
        KzCNx4NN+Y2r9nYfY9Q2LxfBagwAMD4RYqO++cwrynunfJ/xlAvL2Fm1RvrwySAATJzZN1AS
        enffZVN9/5QKq37VzcVmffMlYpo4uwKACRPTZKOxZVXNud8tnMr7J11YQsShd3dcLn1BPAwV
        ACavfyA7snPPZVN5PumkC6v55AtzqKf3csLyMQAwBWKKZvb1r9mz7JxJn/RMunRCbD832tCK
        R3YBwJRJa+dCp9155mTfN6nCql4dyArvrrgAy8cAwLSIcKSi9uLq1d+d1LSoSRWWuWvHUg4O
        fX5yyQAARpLg0Inm9vpJrfAyqcKS4OD1ZnAAzxgEgGmT4KBLwkPfncx7JlxYdZfeeIxZ2/TZ
        yccCABidUd24tPaymyY8kXTChRV5b+83JBydNbVYAACjCEdnRd7eNeFllCdUWOWnr3OYQ8Nr
        sYQMAMSSRKOaDA+vLT993YSeYTqhwrL79C8a1Y2l00oGADAKo6Zxnt3DJ03ktfp4L9iyZYsm
        T/xzpX7UPExlAIB4YFPMlSLyIjObY75wvC11dHQU67r+JyI6NmbxAAAOtS0SiSzPzc1tGutF
        414Sapp2HBF9KmaxAAA+gZmXOByOcWchjFlY8uGM9vNomkspAwCMRUR0wzDOlXHuohmzsHp6
        ekqUUifENhoAwEjM/IWurq7ZY71mzMJSSp0kIiWxjQUAMKoSXdfH/LRwvEvCbxCRPaaRAABG
        5zBNc8xJpIctrLa2Ni8z/wtNYZEtAIApYGY+paWlxXO4Fxy2sHRd/4qI+OOTCwBgVNkul+vL
        h/vmqIUlIrqmaacSPh0EgMTSiOj0F198cdRJ7aMWVn9/f5aInEi4HASAxGIROeG4447LHO2b
        oxaWaZolRDTlZ4cBAEwVMx+jlBr1EYKHG8M6jfDpIABYQEQc0Wj0a6N9b0RhlZeXO4hoQndO
        AwDEg4h8SURGnDSNKKz8/Py5RLQgIakAAEbBzAv7+vpGTFofUVjRaHQREWF2OwBYqYSIFn3y
        iyMKSyl1ImH8CgCs5RCREfcxf7KwmJm/QJjOAADWYhEZMZZ+SGEFg8E8ERlxGgYAkGjMfGR/
        f3/ux792SGGFw+GlRHTY+3gAABLIG4lEDnnQ6iGFpZQ6hpmdic0EADAqp1LqkNWODxaWiNiY
        +dMigvsHASAZaET0aRGxHfjCx8+wHCJyXOIzAQCMjpk/297efvCZhQcLq6ury09E8yxJBQAw
        ChGZ7/V6sw78/8HC0nX9GJrAcwoBABLIFolEDi7E8PExrM9YkwcA4PAMwzjYTYqIaP9A+xLL
        EgEAHIZSasmBDwMV0YcL9jFzkbWxAABGEpHivr6+TKKPzrD8IlJgbSwAgJGYueDA8yUOjGFl
        ExHOsAAgGRUyczbRR2dYc4jIbWkkAIDReU3TnE300RnWfMIKDQCQnJj2zxE9UFhYYRQAkhYz
        LyBCYQFAalhIRKRExCki+VanAQA4HBEpKC8vd6jOzs4cZnZZHQgAYAzurKysHKVpWh4KCwCS
        GTO7dF3PU8ycIyJYtA8AkpmTmXMUEfmJyDHeqwEArCIiDiLyo7AAIOkxs532F1YuYdIoACQ3
        RUSzlIigsAAg2TEz5yqllN/qJAAAE3BwDAsAINn5lYhkWp0CAGA8pmlmKSLKsDoIAMB4mNmn
        CI+mB4DU4FFEhNtyACAVuFBYAJAq3Iowyx0AUoNDMTOe9gwASU9EdHXgAYUAAMlMKaUpIkJh
        AUDSExFdjf8yAIDkoIjIsDoEAMB4mDmqmBmFBQBJzzRNQ4lI1OogAADjYeaoIqKQ1UEAACYg
        pIhoyOoUAAATMIjCAoBUMaSIaMDqFAAAEzCgRKTP6hQAAOMRkT6llOqxOggAwHiYuUeZponC
        AoBU0K2UUl1WpwAAGI+I9CgRaScisToMAMAYhJnbFRGhsAAg2ZlE1K6IqIcw2x0AkpiIhDVN
        61ZE1E0oLABIbiHDMHqUiHQS0bDVaQAADkcpNSQiHcowjDbC7TkAkMREZCgajbapnJycDhFB
        YQFAMhucNWtWp2LmEDO3Wp0GAGAMLcwcVkRESqlyq9MAAIyhgujDNd3JNM1Ka7MAAByeiHxU
        WERUSZg8CgDJSYioimh/YTFzvYgMWhoJAGB0QaVUA9H+whKRTmZusjYTAMBIzNy0f77oh4UV
        DAZ7mLnF2lgAACOJSAt9eEfOh4VVXFzcQ0SNVoYCADiMpszMzD6ij8awDBF539pMAACj2n7g
        gc8HPiUkZn7XujwAAId1sJsOFpbNZttJRBFL4gAAjC5iGMYHB/7nYGEFg8Ee2j/XAQAgGTBz
        hWEYB587cbCwcnNzQ8z8jjWxAABGMk1zW25u7sH1+j4+hhURke1EZFiSDADgUAYzb2fmg0NV
        6uPfNU1zJ2ExPwBIAiIybBjGjo9/7ZDCstlsbzNzMLGxAABGYuZgOBw+ZJjqkMLy+XxtIrI3
        sbEAAEYSkd2FhYXtH/+aGuV1rxBWbgAAawkzv/LJL44oLKXUq0QUTkgkAIDRhZj5tU9+cURh
        7b8krEtIJACAUTBzbSgUGjE8NaKwMjIyapkZSyYDgGVM06zIzc0dceI0orCYOSwiLycmFgDA
        SMz8/5h5xNDUaIPuRETPE8axAMACzBwSkb+O9r1RC0spVUdEO+OaCgBgFCKyQ9O0+tG+N2ph
        +Xy+HhF5jTC9AQASS0TkNZ/P1zPaN0ctLGaOishzhPsKASCxDKXUswcW7Pukw41hUTgcfpGI
        uuIWCwBgpM6hoaF/HO6bhy2sgoKCASL6X8JlIQAkhjDzC/u7Z1SHLSwiImb+EzOHxnoNAECM
        hAzD+MtYLxizsAzDeFlERh2tBwCIsTqn0znmHNAxC8vv99eLyKuxzQQAMJKIvOxyucZ83OB4
        l4QiIk8yczS20QAAPsLMUaXUU8w85pj5mIVFRORwON7ZvxIpAEBciMh2Xde3jfc6fbwXuN3u
        lsBz5pu1PXJsbKIBABxqTia9s+E8d+t4rxu3sJjZvPHJnq3V3dq3TJM4NvEAAD6kmGR2Bm9h
        ZnPc105kgyFX5j+LfVI9/WgAAIcqzKDKSLNnQivETKiwNp7BIZui/9IVbtUBgNjRFBl2Tf5r
        43UTm+85ocIiIjoyP/KMpqhj6tEAAA6lK+o4Zhb/aaKvn3Bh/fjMnF2FPsGToQEgZop88lbg
        bN8HE339hAuLiMihmXe7bDQ0+VgAAIdy23nQYVO/nMx7JlVYR/jlba+NRjzJAgBgsly6+frC
        zMikrtomVViBc/w9ZdnyB2as4AAAU8dMUpZDjwXO8Y+6UN/hTKqwiIgMoqfzPFIz2fcBAByQ
        65EqEfrjZN836cLadKGv0+fk/1aMKQ4AMHmKych00YObLvR1Tvq9k94bsxyVox7y2LEaKQBM
        nttOXUdmhzbTODc6j2byhUVEgbM8Tble+b1SGMsCgIlTiiTfKw8HzsptmtL7p7rjeTlqs9tG
        WNwPACbMY5O6Bfm8earvn3Jh/fwsz85CH/1fwieGADARTFLg4z/e9nXvrqluYsqFxczi0en+
        TDt1T3UbAJA+Mh3U5XPSpvEW6RvLlAuLiKjP6d2d65OHprMNAEgPuR55sPhC7+7pbGNahbV1
        JRtHeYc3ZDqldzrbAYCZLdNJPUtmqbsCE1jzaizTKiwiosDKvJZcD92nYekZABiFpsjI8/J9
        N5/lHXdF0fFMu7CIiD5VYPzW55C6WGwLAGYWj13qjp0T/m0sthWTwrrl6/7afI/8Egv8AcDH
        6YqMfC//8t9PyY7JCU1MCouIKMsb2uJz0Oux2h4ApD6vXV7zOvmJWG0vZoV178q8lpKs6B26
        hnlZAECkayRzsqJ3PHDR9MeuDohZYREReXKyni/0ylNYfgYgvTGT5Htoq6+n84VYbjemhbXx
        DA6VZpo/dem4MRognTl06SrNNu7YeN3CCT1cYqJiWlhERL+8IGtbnpceZaZpzbcAgNTETGae
        j37365VZMX8GRMwLi4hoQYF+V7aL8Hh7gDSU7aIdR8/SJ7VW+0TFpbBuX+6qK/DJfzg0Go7H
        9gEgOTk0Gi7KlMBtZ7vjspJLXAqLiCjH5Xshxy1PEGEAHiBNSI5HHvc7fM/Hawccrw0TEd38
        9OCcV2uj7/eFOCue+wEA62U6qOuEueFjbzs7J27r5MXtDIuI6Laz3fW5HrpBV3iWIcBMpisa
        yvXxjfEsK6I4FxYRUYl98ImCDHkOc7MAZiZmksJMeXaOHtwS933FewdERN/eEvzUrhbzj33D
        XJaI/QFA4mQ4pXpxgTrrnpXeHfHeV9zPsIiI7lnp3TEvh2+yaZibBTCT2DQy5+WYNyWirIgS
        VFhERFrQ+3SeVzbjeYYAM4NiMma5ZbMWzHw6UftMyCXhAeseGZz9QbfxXM8wHU2S2H0DQAwx
        SZaTPyjzh0574JKchkTtNmFnWEREGy9xN8z1Gdc7dcG9hgApzK1TV0k23ZDIsiJKcGEREZXU
        ZP5tQQ7doSuMZwGkIl2ROT9bbp9b7vlrovdtyWXZukc6M6r67f/V0k/nkwWlCQBTZhZk0JOL
        C71X3HEW9yd655aNI9389OCcN+rNl7uHZQ7GswBSAJNkOaVuaantS7cvd1nyDAfLzm5uO9td
        n5thXuCxScxWIwSA+PHYqDXXo19kVVkRWXw5tqja90aRj26xaTxgZQ4AGJtNo8Fiv/rhkXUu
        S5/bYPml2Pot4modDN6xr52uFVwaAiQdZpIjcszf5Hsz/u3ulWzpfcFJURD3vy22Z97qf6El
        yF9GaQEkD2aSQh+9WMje0zZdxRGr8yTFJ3RXLeXIojzb6kwHvWF1FgD4SJZT3pyfr1+RDGVF
        lCSFRUR013mu2nm5ckOGk/ZZnQUAiHwOKl/gpxt+eY6rxuosByTd5deaR3tPrepQTwVD5LY6
        C0C68tppaNEs4+xNl2TF9DFd05U0Z1gHPHRxxgtFXlrj0GnQ6iwA6chho8E5WbR60yWZCZ/J
        Pp6kKywilqjP+2SBV35i01BaAIlk13ig0Cs/Drm9TxJx0i26mYSFRbR1JRtLCoO/mpPFv9YU
        R/EcC4B4E9IUR0uyaOMXFvt+tXUlJ+UyUElZWEREgeVFgyf4PD8q85t3Eydf0wPMLCylfvNX
        RT7Pj64/0dq5VmNJukH3T1q/pd5V3Z15X2MfX2QK2azOAzDTKKZIcYY8Xub3XWX1xNDxJO0Z
        1gF3r5wzVJxLNxT46P8opqjVeQBmEsVkFPjk6aNyaX2ylxVRCpxhHbB+S292Yz9vquzk86zO
        AjBTzMuWp/Kyae1vzs3otDrLRKRMYRER/euWNm9Hn/PB6m4+xxTSrc4DkKoUk1GWLc94KbTq
        wStyE76u1VQl/SXhx927Mi+Ym03XFPjoScWUFLcKAKQaxRQpzKCn5vvpylQqK6IUKywiot+c
        m9FZ4pJrizLlD8QkmPIAMFFCRCRFGfL4nFy55mcpchn4cSl1Sfhx67fUu5r6M2+t7lbrDVNw
        eQgwDk2RUZpl/ro4I+PmVBhgH03KnWEdcPfKOUNFvt7/LMmUO+xYABBgTDaNB0qyZMPR+QO3
        pGpZEaXwGdYBgWea3LtavNc19qsfhqKCG6YBPsGh02BRhvzomPzgxsDyopS+3S3lC4uIaMUW
        0bRg8Pymfn5wIITSAjjAbaeh4gxaY3i9/5Ost9tMxoworA8Jr32k95SKTnVPb4gXWp0GwGo+
        p1SU+tW6zZd6nk/GG5mnImXHsEZi2XRJ1gtH5NAav4teZ8bHh5CemEn8Lnptfjat3nyp97mZ
        UlZEM+oM6yPf/UN3aUWv/lBLP2GNeEgrzCT5PnrpyNzomrvO89danSfWZuzBHHhR9L01wTur
        u+RbEYM9VucBiDebRoNzs2hz5qe93920NDnWYI+1GXRJeKjAVzha4PH+oDTL/I7XTs2ES0SY
        qZjEY6eWUr+xPjPa/72ZWlZEM/gM64BAQFTN3L68rQrnAAAGsklEQVRlDUF+tHuIS2kGlzSk
        JdPvosbcDPnmomrfG4EAm1YHiqcZX1gHfGdLV0lFl21DR5DOi5ooLUh9ukZmroeeWpwdueH2
        ldmWPT4+kdKmsIiI1j3SmdFn2q6u6OR/G45SNmFAHlIRkzg16i7xy52zbJF7N16S02d1pERJ
        uwM2EBBVM3/gXxp65Be9w3SUKaRZnQlgopjIzHDSnhK/eUNpZcYLM/0S8JPSrrAOuPp3HcX1
        A85bOwZlDS4RIRXoisxZbvl9sTf6H5tWpccl4CelbWEREa29X2ziC55Z0S539Ie5DHO2IBkx
        k3jtUlvql+8POBue2rpycdjqTFbBAUpE1z3ef0xTUG5t6FWnRQzciwjJw6ZoKM9LzxVnRAL3
        XZT9vtV5rIbC2i/wjLgr2vsvagzShr5hziD8bMBakuGk3nyP3DjbNvj4hlUFWEKJcFCO8OPn
        e8rerdVvbQ3KiuEoOa3OA+nHoVHI75bHjy2M/PC2s3Pqrc6TTFBYowg80+Su7/F+raGXA11D
        9ClTMCgP8cdMZpaLdhZm0K2uof7nNl2V2mtXxQMKaww/eX5wzju10fVtQbosZLAfg/IQD8wk
        Dp268jz0SElW5Be/SpNJoFOBA3AC1m3pXdbUp25q6KVzogZ+ZhA7miIp8NLTJZnGT++5MOtt
        q/MkOxx8E/Trv4ijOthzxu4O/YaeQfpcxMRzEWHqdEWGx0GvF3vl9qx83wsbz+CQ1ZlSAQpr
        kv51S1tB94D7gpZ+um4gLCWGiZnyMHGaIsNj57o8t/ErV4b2xOaV3harM6USFNYU/eTP3XN3
        NKtvdQyqa3qGKdvqPJD8Mp3Sl+ul35b5jft+fo6/xuo8qQiFNU0//Ut/7o5Wub65j6/sD1MO
        bqiGQzBLpkO68z3m5mOK9Q03n+ZptjpSKsPBFQOBgKi9pV1HiWm7oiVI5w6EucQ08bNNZ6xI
        3DrXF/rkTy4H/7b0Ys+uAKfXjcrxgIMqhkSEb/5zcPG+Fr6oY0DWDIQpF6tBpBdmMr126srz
        0WOFGfzf/p0bdgYCARRVjKCw4uT7W/pz93bLmv4wXdk9zAswh2tmYybJ9VB1ppMeOmau9tAt
        /+JutDrTTISDKJ5EeNXD/dmK5YzmXrVq0KATB8OEm6tnEJeNhpw2en1+Dm0Rkf/ZdKGvk3jm
        PFYr2aCwEuTXf5GMN9p6jx+OqO+09PPxEZNyMSUiNSkm06ZRR0mmbGNl/mJRlrwVOMffY3Wu
        dIDCssAtT/UftadLlpsmXdnQx/MNLCCYEhSTFPqkSmN6YH5O9C8bzsdyL4mGwrLQur+IQx/o
        X1bVTZcOhPi03hDNxqeLyUUpkkwH1Tvt8reFs9Qfoo2ef268DrPSrYKDIwkEXhS9q7OvrKWb
        lkaIL+oYUEsihhRHDFwyWkFTZNo1asx2mXvcDn4szy6vZBdlVAe+wlGrs6U7FFaSCQRE2ZcF
        j3ynUZ0UNYxLOgfpsyGDnSaRwqTUOGESEhKXjYbzfLJdTH74qFmRl+3n+D/A3KnkggMgyd37
        px5/XURb8W6TfE4xfbV7iEsiBsa8YkFTJH4XNTPJ3+fl8Guz7fLED87N6LQ6FxweCitF3P+2
        2HbXDs7qGTQWRA26pKGPjyChRcNRyf+wwPCrHI+uyHTaqJ2J98zOkj2K5RG3U6+2eRs7Np6x
        EONSKQB/5SnqF6+Kq6118OjdrZEyu66+3jvMn+8ZolzF5IsK2dJ9oiozicYUFaL+HDd15Ljp
        rb4Q/XGu36x1ZA7t2nAq1khPRWn9Rz2jiPDPnm+f3zno/OLuFim16fT5SJSXtQ9yppEmnzwq
        ReJ3Ur9Dp3eiQi+X+qUux0X//MmZvn2YzDkzpMUfcvoRDrxY42hqL3UMhkK5mbbwyb0h+Uxd
        j8rXmeYRU8lwhLJCBisSSbm/AbtOpscmfUxcbxBVlGRSa46HdvSH5O9tIaOlzBMM3b1y9jAR
        SmqmSbk/Vpi6wIuiR4JD+d1DZu6+dtPrd0iZz6k+G4maR3aHVG7XAHlFKEMp8ZCwwyTSIwap
        RF1eMpPYNDIVUZRYQqbJA4ZQX6aDBv0e6rBrVD4Ylm0DEdq3IFsbmJOjOvx+Z/NVSzmSiHxg
        PRQWHHT7H9t9Id1VOhg1ivuGNX/ngOlp6WO7U5cSl4NL7UoKSCjHJJURNUzvsMFOwxA9KkoR
        iQpFPzyliUQ//Luy6SRMRA6dhIhNnU1T0zjq1GRY11RQkdknxB2GUOtASGqGTa4t8Eokx6MG
        MpxGt1vXGnPcg9XXfiUvaO1PBpLF/wdvRGA8SHLN/wAAAABJRU5ErkJggg==
      </shape>
      <shape name='Flags/malawi.png'>
        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
        bUvuVH+T9Pj/5iD9yNPl5e8AAAAASUVORK5CYII=
      </shape>
      <shape name='Flags/netherlands.png'>
        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
        kaNcLAAAAABJRU5ErkJggg==
      </shape>
      <shape name='Flags/new-zealand.png'>
        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
        Rbp7jDrk/wFRax8c7DE2hQAAAABJRU5ErkJggg==
      </shape>
      <shape name='Flags/norway.png'>
        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
        RK5CYII=
      </shape>
      <shape name='Flags/rwanda.png'>
        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
        vP9orYsAAAAASUVORK5CYII=
      </shape>
      <shape name='Flags/sierra-leone.png'>
        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
        SUVORK5CYII=
      </shape>
      <shape name='Flags/sweden.png'>
        iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAYAAAB5fY51AAAACXBIWXMAAA7DAAAOwwHHb6hk
        AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAIABJREFUeJzt3Xl8VNXd
        BvDfuffOPpPZMtnIAmERWa07WhWtLVVrq7WhVutSa8GqoCCKWqzXiqKCYOGtCq9Y61qNS1/1
        rdVaa+uCWkQRw75lISSZyWSS2TLLvef9Q+RFEiDLzNyZzPP9S5OZe58PJA/n3Dn3XEYA+9y/
        +hZbs988wtttK28NGp0tIbO5sdOuL9DFqwpMseES4yUqscJEUrAnVTLHVUkfT4pSd1IU44oo
        EBElFYESqsAExskgKlwSVNJJCtcJXBWZqkoiT+oEJW6UlJBOUgIC496kKuztiBp3d4RNe8qd
        HYlqVyhcagv5KyxdDdWOpvrLL38qrPWfDWQHpnUAyBxZlqVtZCpp7TZ5trYVWtym2BiTLnl8
        KKEb0xoyuTsiRpPI1AKBkZUTGRTOpLgiMc45y8SPCiPiOinJJcYTAqOYwllQJQoWmqPRQnO3
        36RLbu1WhE8iMd32Y8u94Sp7sN1UWtciT6+Npz0cZAUU1tDEZFk2vB8tNYTjSY/DqJzpi1iO
        2ey1l+gEGikwXhGJS/ZIQidQjv0MMOJkNSQUmyHRqXLak1DEHaPcAW+VvXN9QqC/B6PWVmfx
        5njt3GXdRMS1zguplVM/rHBonIjRhu8UkVk97qrnzzl2ze6SM7oV6YQ9ndaChCrkxd+zXlB4
        qT3cpROUz2JJ6f1jStvqq+1d7/3+lju2EkN5DQV58YM8FPFtowwkjKgkhY8hzk8kgU4jYuOI
        k/XqF882rV47QdA6o5YExrkkKEmVC8HSgrB/mC38iS9i+J/xJe31w8RA3cOyHNI6I/QfCitH
        8H9OlaiMHKSyKhKEaSTQt4mzUURUSUR6OuDv8uqXzqbV/5mgWdbsxEkvqqpZn/QJjG8e62nf
        LHDhOb0luW188UbfitkrYlonhCNDYWU5XjfVSnrhTCI2jYidTJwm0lcFdUgorL7RCSovtkX2
        ksDfmTKs+cNRRb4XFl2/qF3rXHBoKKwswzkx2nRWJUn8VOLiNBJoGqnkJsZFItanvy8UVr9x
        xrhq0SViFY7gl4rKnjy9qvG9zs8/r6utrVW0Dgf/D4WVBTgngbaeVUoSn0yK+BNi9G3iVEnE
        9X0tqQOhsAaDk05UVYOkNJfbQ5vcpugzJZbuDydKHbtkWU5qnS7fobA0xNcepyNbwTgi4afE
        2DlENJGIxMEeF4WVOiLj3GONNNkM8bdPKGt7saNd9483VszG9S6NoLA0wDefWkbMcB4JwhXE
        6WRKQUkdCIWVHgLjvMrRVW/SJ1adObrh1T/M/W2d1pnyDQorQ3jzcWYKOycRp0uI0w+IURkR
        GdJxLhRWekmCqhglxTfG4/9MENSlI5x7Pq2VZb/WufIBCiuNOBGjHWcXkMJPI2JXEudTiTF3
        us+Lwsociz7ebdUnP55Q7KtVVPH5d5fMbMci1fRBYaUJ33G2nZJqDTH2KyJ2PBFlbCEnCivz
        GBEvswcbKgrCj02pavnjsrkL9midaShCYaUQ58Ro99QqiksXE+NXE1ElEdNlOgcKSzsCU1WH
        KeavcAafrXZ0PD5ZDG6QZVnVOtdQgcJKAc6J0bazRxDnPyXGfk5EYymDI6qDobC0JzDObfpE
        U5Wj63W7JfLorBP/WTd9OtZ0DVZKP53KR3zH2XbyjriOGPs9MXYRERWRxv8QvLqpmj5rLtIy
        Qt7jxFhMEe2tYfPx4bjhZ5u95Z6ai0/64qM338E9jIOAEdYA8W2neUjVX0ZEs4ix4RrH+QaM
        sLKTxxLpKrFFHp1YtHfls/JtO7XOk4swwuqnGvmBktITLvpltSu4otIZmp6JT/36CyOs7BRJ
        6AztEeOUpk7HheOmThO/dca0Xds+/CtGXP0gaR0gV0yVZaMz4Tj/w/riOcGY/sTObiPKHvpN
        UQXBHzVWBVt09zuNsR+fNufRB0R7y5vvynK31tlyQV7vmdRXF8hLT9yzp7r2tS3Vz+/ptE2J
        JUWUFQxKQhHFtrD5lI8ay17Zu7f6zxfJS4/XOlMuwAjrMH65cGHVpy1lc/6xxfHzUEzv4rjm
        BymWUAW21ev6YVOn7bRx1/zp2WPc3iXP3jOvXutc2QqF1YvzZ8jmvYZh576+zf5bX9g4XlEF
        jEQhbTgRC8d1rs1e57XtUdMZp8195C5HQesbr8lyROts2Qa/iAf5xcIHK75UxzzyZavn6dag
        eSLKCjJF5YLQGjRPXNtU+symPaMfufbBhRVaZ8o2GGHt8715iy3NEc/Fr242L26PmB2E6R9o
        JJqUDNvb7ZcFPhtzwbGzVs8b6W58rhZ70BMRRlhERPSDO5ZP3tlZ+swWr3NFe8TsJJQVaI/5
        IuaCL1sLl69rHPXMubcvO0brQNkgr0dY42tkfeHwoh99uLPogY6osQoX1SHbxJOicWeH4/xA
        zHDM1HmPzPdYW1+uleW8fXBs3o6wzpqzdFjMMeqRj+rL/uyPGoejrCBbcSLWHjFVrqkve3bD
        3uqVP5bvL9c6k1byboQly7LwdmfJ9+raXUu8YdNYlbO8LW3ILTFFZFt9zss6ooaTTpu38ubv
        WPe+kW87QeTVL2vN/Pvs7wSLb/mspfjp1pB5nMoZFoBCTlE5E1tDlrHrmoqe+l9/+fxL5eUF
        WmfKpLwprBr5vsqPvcNXr6kvuzcc07kJU0DIXSwc1znXt3gWftzkWj3jPrlS60CZMuSnhLIs
        C6/7yqe8v9v69N6gpZJ4/x+bBZCN4klR2NFh/3Fk89iTTrv5kZ99x9K6ZqhPEYf0CKtm6VLT
        i61VMza3u17a22WtIlyvgiGGcyY0d1nLv9hT9NL/+CpmnC/LZq0zpdOQ/QWukWX9th2OB7f6
        XA+GYvpiwhQQhi7W2W0ormt1L23yVi6VZVmvdaB0GZKFVbNg8YjPmka++cVezzVxRRzS/+IA
        fC2uSKb1ez0zntoz+m9XLlo0XOs86TDkCuv0mx49/Z3dVc/v7HCcoQ7gMe8AuUwlxnb5C6a+
        tWXEn6fdtvw0rfOk2lAqLHbyjavO2dDqebw9Yj5BxcV1yFMqZ6y5y3LSp42lT5w27+HzaAhd
        DhkShVVTUyOecMN/T9/c5n6pI2IYqXUeAO0x8kVM1Z83l7x43PWP/azmhZohseYw5wtLXimb
        N3nOu/XLFs/jgW6DSes8ANkk2K03bvK6/3vbv865RV6Z+58g5nRhzZBl84vrh9+1zee4PZqQ
        cv4vAyAdIgmdebPXteAvX1TJM3J82UPOFtYMWTavba+8f1Ora04sibICOJzupGT+stU9d62v
        cmHN0qU5OxPJycKque1ezwetw59ct8dznYL7AQH6JKky8bNmz43rN3tWnX/TkkKt8wxEzhXW
        5ffe697QUf7IZq/7h0SMDaEPQADSjBEnxnb4HT/d1FXyyOX3/lfWPVPzSHKqsH54y/22z5pK
        H9vqdVygqEyndR6AXKSoTLfTX3DhF82Wx2rkP1i1ztMfOVNY58tLCrcHi5/Z0OK5QOUCpoEA
        g6ByQfy82XPB1jbzny687d6cGWnlRGH9TF5SuLPVs3Jzm/tcrbMADCUbWgt/uLlj2MMX3psb
        pZX1hTVDls0bfe7/2ux1nY8N9wBSS+VM2upzXFi3u+KhXNjpIasL67LFiy2ftFcuWd/smY5r
        VgDpoaiibqvPcWl9W9W92b5OK2sLS14pm9fv8ty1oblwBhHHR4EA6cXq2tzXf9xWeefSF+Zk
        7TqtrCysmpoa8cXPh9+w1ef4tcIFEUsXANKNkaIK4pZ213VP/XvCDTU12XnvYTYWFtvuOWf6
        Tr99QTdWsANkVHdCsmz1ue5oLP/uRZSFI4WsK6xTb1r1/Z0B++pIQoeyAtBAOK4zb2x1/+mk
        2Y+eo3WWg2VVYZ0x5+HTNra6V3Ri1wUATXV1G4xb/YW/P3v+77+tdZYDZU1hnb9gxYg6n2dx
        R0SP/awAskBHxDDqy5aSxb9cuLBK6yxfy4rCqpFl/ZfNrj+2h00nZuG0GSBPMWoLmU96v7Fq
        9YyVM7JiWZHmhXW+LJu3+yp+Xx8oOJ2jrQCyisoZ2+ZznPVZ3UnLsmFhqaaFJcuy0OCruHxj
        q/sKPDACIDupnLEv9hb+or6l8gpZljXtDE1P/kpbxSk7fC45pki4yA6QxWKKaN7Z6bjz9UD5
        FC1zaFZYl8v3VbaEbc+G4roirTIAQN+FYvqi5oDl6WsfXFihVQZNCutSeXnBe41VS1pDpmGE
        61YAuYLtDVor395S+eClslygRYDMF5YsC1vaLdc3dZkvIs40v+gPAH3HORPqAwUXNQSLr9Hi
        epaU6ROeHKiY9kWba15CEVFWADkolpSEdXuK56tl7Esi+msmz53R0jjnluXlO9ttSyIJnSOT
        5wWA1ArH9c4tXteSH8vLyzN53owVVo0s67cF3L/zRUxHEa5bAeQ65o+YxtQ1O+6asXJlxhaV
        ZqywmgLDLmrosF6BXUMBhgaVM7E+UHBlw674BZk6Z0YK6wfzl0/e4nUuiuO6FcCQ0p2UhLV7
        Su7/4e0PTcrE+dJeIJctXmzZ6nfc1RE1Vqb7XACQee1h0/Bt7a67Llu82JLuc6W9sD7fVXjJ
        7oD9e7hPEGBo4kRsh98+bXOj49J0nyuthXXJwiVVTZ22xXFFxK03AENYXBFN9R32xbcuk4en
        8zxpK6zz5ZXmD3YNu7sjatRkRSwAZFZb2Gx7dUv1wnQ+eSdthdXewc5pDZqmE6aCAPmC7e6w
        /WRnxPP9dJ0gLYV1ycIlVTs7CuTupGRIx/EBIDtFEjrD5jbXnem6QTothbWhyTWvLWIel45j
        A0B22xuyTPj3tmE3pePYKS+si+546KRdAcelqipgzRVAHlJUQdgdsF/2Y/nBk1N97JSWypWy
        bKxrc90RjutxryBAHgvH9c7NrZ75V8qyMZXHTWlh7Ql7Ltze7jgXa64A8hsnYtt9jh91Ju3n
        pvK4KSusH8oryja0em5MqgLKCgAorgjsP3tK5l35wAMlqTpmygqrLWC42B81HJeq4wFA7vOG
        TSdu2ev4aaqOl5LCunrx3SN2tLtmxRUROzEAwH6xpCRu9bluvGbRouGpOF5KCuvDHRXX+aN6
        3NwMAD0EovqK9+pLf52KYw26sH5+zz2lLSHrDAXLGACgF4oqiK0hy8wbHrq9eLDHGlTJ1LxQ
        I9a1lM3zR4y2wQYBgKHLFzHZ19RXzxnsgysG9Wb/J2eObwhYrxzMMQAgP+z22X65Jlp49GCO
        MeDCkmVZaA2bfu0Pm5yDCQAA+cEbtrh9EfOMwYyyBvzGTYJtYmNnwXlYJAoAfbFvo78LtpBl
        wkCPMeDCqmtx/SIY02f0ET8AkNu6uvUV61uLrhjo+wdUWNcsXDisKVBwqcoZRlcA0GcqZ6yl
        y/rzaxbLRQN5f/8LixNb0zLsqq6YzjWQEwJAfgt0691rGyquoAFcTup3YU2dt9LdHjb+UuVY
        dwUA/adyJraGLL+YNmdpvz+w63fpiEy9aE+nFavaAWDAmjotY7tF44/6+75+FdavFy1y1nmd
        F3PCtSsAGDhOjG1pc192yaJF/Rpl9auw1jSVHB+M6VO+iyAA5J9QQnfytmZ3v3Z46VdhKVy4
        MRzXp3QHQQDIT6GY3qRwcVZ/3tPnwvrlPfdM2OkvwH5XAJAyW33OE2+8/+4+367T58L6uGnY
        +bGkWDiwWAAAPcWSouffjaXn9/X1fSqsc2YtN4QTuplJVcAGfQCQMglVFENxw6/OmbW8T88w
        7VNhFbiTZ9R3FGApAwCk3I52x0ibWzmtL689YmHJsiytay78KW7DAYB0UDhj6/YUXizLsnSk
        1x6xsNaTrToUN3w3NdEAAHoKJ3Rn11HB8CO97oiFVe8rOLUtaMauDACQNt6QubIxYD3pSK87
        bGHV1NSIXTHzzxRMBwEgjZKqwELdhkuOtLnfYb9pO+64CS1B07jURgMA6Kmh0zaxs0A47Jqs
        wxbWmt0lp8QVoTS1sQAAeoopYtnft1Uc9tPCwxYW5+yyuCJiGxkASLtYUhAVVbz0cK85ZBnd
        tEQubAgUTMaW7QCQGYwaumzfkh+TD7k56CELa3unY3o0KeJGZwDImGhcMm5ttv7kUN/vtbBm
        LZ9lWNtQOoVzAcMrAMgYlTPh/d2lU2S5Rt/b93strLpd4wqJ8bMI80EAyCzGOJ21jo7vdaOF
        Xgsrzml0a8iMTwcBIONawpbyYKBgRG/f6/0aliBeklQxHQSAzIslJSHOxJ/39r0ehTVv8TzL
        xlbXUemPBQDQu7pW17h5i+dZDv56j8KqD5eNJ6KxGUkFANALQeBjWmOeHqveexTWuqaiEaGE
        DjuLAoBmIgmpaF2zZ/jBX+9RWAXG+A/jSTwkFQC0052QBKtOOffgr3+zmDgxf9R0PFYzAIC2
        GLVHTFPooDL6RmHNXSqPbu6yYDoIAJprCNg8C5YvqD7wa98orC+9hVMZcVtmYwEA9IYXrGsu
        OfPArxxYWGzD3sLKhCIccV9lAIB0Syii9HmLp5IOmBbuL6yapXOMFkPi25ywuygAaI8TY1Z9
        /JQrZXn/I8D2F9a2hkpDPCF9S5toAAA9JVV2XFO0tGdhOfWsuDlowfUrAMgaezqtdrsp4v76
        //cXVoFO/Q7uHwSAbBJTJKYT1Klf///+wtobtE3UJBEAwGHs7rAd9/V/C0REslyj3+pzlmgX
        CQCgd5ta3KUzVs7QEe0rrGbjcSV6UR2lbSwAgJ70klIthSpLiPYVVn2XtZAzwtOdASDrSAIv
        9wYtbqJ9hbWpxWUOx3QF2sYCAOgpHJccG5sLrET7CqvQ3D06ktDhE0IAyDrBmEEwmngl0b7C
        MhvixxO2aACALMSJmEVKnki0r7BCMf0YbSMBABxaKG44mohIIiKafcrntmCs18eAQS9EQaVx
        Re1axzikn03eQpNKfFrHAEgZmyFhu2oFEeO7phopIX5KxMZpHQoAoHe8jpj+OIHigpuImbSO
        AwBwSJyZSelyCyQIRcQ4CgsAshg3kaArkoiTm4iMWscBADgkRkbizC0QU51EZDjiGwAAtGMg
        QXAKxAUnEUNhAUD2YkxPKncKRKqHsGgUALIZ5wIJrFAiYigsAMhyjJFKHoEYObWOAgBwRIw7
        BeIoLADIAZw5BSKya50DAOCIGDkEIoZ9sAAg+zGyCURk0ToHAMARqdwiEOG2HADIAQIzCbjx
        GQByAudmgYhjlTsA5AKDQMQkrVMAAPSBJBBxUesUAABHxkSBiKGwACAXSILWCQAA+kog4orW
        IQAA+iApEDEUFgDkAK4IRDypdQwAgD5ICkQspnUKAIA+iAlEPKp1CgCAI2IsIhAxFBYAZD+V
        RwUiCmudAwDgiAQWFoh4l9Y5AACOiFOXQIwFtM4BAHBEjAICqRyFBQDZj1OHQALza50DAOCI
        +FcjLC8R51pnAQA4NM6JuFcgkXmJGAoLALIYU0ngXoGSaoCIY7U7AGQxHicudAgkCB1EhMIC
        gGwWI64EBEpQO3Hq1joNAMChsSgR+QSS1DZiuD0HALJalJRkm0CCwYcboAEgqzGKEPe3S2z0
        G7HHn50dDMZ0WkfKGaLA6byxu2m4MzvvavrH9gqqa3VpHQMgZayGePCXl7wdl4iIln94TPDz
        5iKtM+UMg5SkEc6urC2s59YfRav/M0HrGAApc2xZa5CISCAisuriW7WNAwBwaFZDYhPRvsKK
        JPRriQiLRwEg6zAiHk5KnxDtKyxfxLjNrEuq2sYCAOjJZoip3VHWQLSvsI4u8Uds+nh2XpAB
        gLxm1icD48q6QkT7Cmtsgc/HGTVpGwsAoCdFZU0eW7idaF9hjXM2702owg5tYwEA9BRPijuT
        1oYWon2FNXPmqsRod0eLtrEAAHqaUOprXjVzVYJoX2EREZXYQl9oFwkAoHeVzq5Pv/7v/YUV
        juj+oRNULG0AgKxhlJI8FDO++/X/7y+sgE7XWloQxieFAJA1yuyhQDSh37+N+/7Cqo5vjuvF
        5GfaxAIA6EkkvrbctHf/fn37C6t22bLucFz/PsP+7gCQBRhxHknoP3pClnsWFhHxSWW+BklU
        kxpkAwD4Bp2oJCeW+urpgNsGDywsmlSy913iLJjxZAAAPbCuY4oa/3ngV75RWItnL9xeZg/7
        MhsKAKCnSkew7b459+068GvfKCxixF2m6Fps3AAA2uLktnSvoYPKSDj4ZV3d+lf1koqdGwBA
        M0ZJUULd0l8P/nqPwjq2vG2XVZf0ZiYWAEBPZn3Ce2x5a/3BX+9RWFWW5jpifEtmYgEA9MRV
        YctIT3TjwV/vUVhLbl4SHudp35yZWAAAPY0v8W2UZ8qRg7/eo7CIiBRiz+K+QgDQglGXVPW6
        5NO9fa/XwjKZle1F1khzemMBAPRUbIk0Wk2h3b19r9fCGl+80UcCvUNY3wAAmcWJ6J3zSnf0
        +sFfr4W1YvaK2EnDmj9iDNNCAMgcgXH11OHNH83ct2Ffj+8f6o2lxd3PmyWlO33RAAC+yaKP
        d48p2/Piob5/yML6w/W3t1c4uj7DrBAAMoNTuT28Tr56mf9QrzhkYRERCQJ7Wi8qWPUOAGln
        kFRFEpLPHO41hy2sU8obP9RLHJ8WAkDaGaTknqnVDe8d7jWHLazOzz+vK7GFe6w2BQBItUp7
        cIM7RIddtH7YwqqtrVWshthzAsMupACQPpKgcpsh8Ywsy4e9BHXYwiIiGmkPfVBsjeCp0ACQ
        NkXWSH25w/efI73uiIU1UerYVWCMv5WaWAAAPZn1ibfHU2z3kV53xMKSZTl5TKn3BUwLASAd
        RMb58SVtf5Zl+YjPkzhiYRERdbVL/6pydjYMPhoAwDeNKgxs7+zQvd+X1/apsN5YMTtm0SVX
        SoKqDC4aAMD/0wmKYjXEVr2xYnbsyK/uY2EREU0pbXnVICl4QAUApIxBUrxTRze93tfX97mw
        /vu3t9ZVuwKfDiwWAEBPR3n8Hz84S+7zhqF9LiwiIpHRQxZ9Itr/WAAA32Q1xKMqoxX9eU+/
        CmtKectamyH2cf9iAQD0VGBIrJk8oqlfs7Z+FdYjt93WMaHY/xwjLHEAgIETGOeTS7zPPDFH
        DvTrff09UVIRXy63h3o8fgcAoK+GO7q2G1nX//T3ff0urHeXzGx3maOrBcaxxAEA+k1kqlLu
        DK5+ZdHth9z36lD6XVjEiB9X6X28wBDr98kAAJymePu3yxueoAHsDtr/wiKix+fPb66wB5/B
        7ToA0B8C47zMHnrq3hvvbR3Q+wd64gnFvj/aDPHGgb4fAPJPgTHWON7jfXKg7x9wYR1F4S8r
        HF2vM2z6DgB9wIj4SHfXK0fRzV8O9BgDLixZllWXIfSo2xLtGOgxACB/FFkjviJLaJUs04Cf
        EzHgwiIiOsveXldV0PXHwRwDAPLDcGfn6pMMs/t8G05vBlVYsiyrE6val7hM3V2DOQ4ADG2F
        lmjg5KJdDw1mdEU0yMIiInrilltaiq3RlSK2ngGAXoiCqhRbIyt//5uBfTJ4oEEXFhHRGcOb
        HnaYuvGJIQD04DJ1N5w8svGRVBwrJYX16G237R7u6lymExWMsgBgP4OoJEe4upaunrcgJbfz
        paSwiIiK9R0vOEyxj1J1PADIfS5z9MNhzo4XUnW8lBXWXxff0jLCEXxQElSsywIA0osKH+/x
        P/CKfHNbqo6ZssIiInLz8F+rnF1/wWJSgPzGiHilq6tWF9v0diqPm9LCemPF7NhYd/s9FkMc
        N0YD5DGLPu4fV+hd/MaKFX16uERfpbSwiIj+974bPq2yB58WBXVQ6y0AIDeJgqpWOoN/evWe
        uWtTfeyUFxYR0WS3d5nHEq1Lx7GzBea8AL0rtUW+OGV4y7J0HDsthfXsPfPqR9g77zRKyZQO
        B7MJ0zoAQBYy6xLR0R7/nY/Nn9+UjuOnpbCIiAq7m98sKQg/TxiMAOQLPswefq4w0f33dJ0g
        bYX12io5cnp54x1Oc6wzXefQEloY4JvclmjHdyt3y7XL5qbtUYBpKywioiflWxsq7V036cXk
        kHuWIaaEAP9PLyrRcnt43sMLFqT1Fr20FhYR0aThvueHO4NvYm0WwNAkMM6rXZ1vTDJ+mbIV
        7Yc8V7pP8NTNN4dHODtkh6m7Id3nAoDMc5u6dx1d2nHnU0uWhNN9rrQXFhHRm/fPXn90kf9W
        vagMmbVZGC4CEBmlpHpC1Z5bXpFvGPC2x/2RkcIiIuq0N79c6Qg+MVSeZ4hrWJDvBMaVSnvX
        6nKv6dWMnTNTJ6qT5fhop//OQkv3ZsIABSDX8UJLdPPYYZ3yqlUzE5k6acYKi4jojQdmN1UX
        dNxs1iVy/sEVaFzIZ1Z9vGNMsX/eq/Ks5kyeN6OFRUT0UWHzm+NL/Iv1Um5fz8KUEPKVQUqq
        x5a1LTrb0vJWps+d8cIiWVYLnY0PD7OFXiLGc7q0APINY1yttIdfcEidK2VZzvjvb+YLi4je
        kOWuqSNabiq2RJsIsyuAXMFLbOHd3x/VdPOrD8wPahFAk8IiIvrjgpsaC82RS6z6+KCfpKEF
        tCzkG5sh3jq8oOuyFWm6sbkvNCssIqK6kt1rRrg6f6sXlYiWOQYC17Agn+hFJVLl6LxrmqtZ
        0+c2aFpYJMvq8KL6Z8YV+54QiGPQApCFBMb5pFLf6hHF9U9qcd3qG1m0PDkR0WuyHDlxYvLG
        Klfnv3C/IUB2ERjnowv97/zA1Tj3NVnWfCakeWEREa2aOTMxubzxFx5r5GN0FkC24FRkDX98
        xoi9V8mynNQ6DVGWFBYR0V/k23aPL26f5zLFtmmdBQCInKbu7ROLvPNW3Xpr1mxckDWFRUT0
        z8W//uBoT9sNdmNsyO2fBZBLCoyx7rFF7bP+vnjWB1pnOVBWFRYR0QcPXfu34Y7OX5h0Cc3n
        y4eDiSsMVRZDIjyxuP2KNcuueVPrLAfLusIiIj7G+8aLowq7fmfUKWnfX2egsKwBhiKTLhk+
        qtB/V1nT31+iLPx3ORsLi2pra5WLJu1aMdIdWCFJv1S7AAAKtUlEQVQyVcnCPzeAIYaTJPDk
        WI9/+Rkjvvyv2trarNwGKisLi4hInilHqot23T3W41+ejcsdsi4QwKAwfnSxb/mo6sDdy+Yu
        y9pryFlbWERfrdEaZ/L/ZnRh4ElR4Bnbc6cvMCWEoUIUlMRRRf6nx47sWFA7N31PvEmFrC4s
        IqLaZXOj492NN410dbwsMDUrh6kAuUpkPDm6sPOlcc6mOdleVkQ5UFhERK8sur29wt113VhP
        x+taZ/kapoSQ+zgdM6z1lVNLdl73yqLb27VO0xc5UVhERP9YdH37+JLQzyeW+F4UGNd81S2m
        hJDLBKYqx5Z5X6l2NV21Wpb9Wufpq5wpLCKiWvm60Ch78zXV7s6XBJZd17QAcoUo8ES1q/OV
        CWUtv6qV5ZDWefojpwqL6Kvp4UR34LpqV+AFIuJaTc4wJYTcw4kR5yPdgecmFnZe8+TtuTEN
        PFDOFRYR0SuLrm//ltX7q/FFvodEjR4bhikh5BpR4Moxw9qWTT7Ke80ri67PubIiytHCIvrq
        08Pqkt0Lji4KPJDNK+IBsoFJlwxPKvE9MHVEZ9YvXTicnC0soq/Waf3kmJ0Lq12Be026ZEbv
        PcSUEHKFWZeIjHIHfndZ9Ya7l+VwWRHleGERfbUifrzv9fsnFLf/wpHBXR4wJYRcYDfGomM9
        HVeN9f7vg3OzeAV7X0laB0iFr+57qq397s1/CKzbW/SH9ohxFCoF8hsntzm2bYzHN3vNsmve
        XDdEJgU5P8I6AP/74uvemlDqvarQ0v2JwNK7R/yQ+NuHIUlgnBdbI2uOG7bnyjXLrvkbDaEf
        16FUWERE9K/F17539sjtP612db6bzgdbYPwG2Uggzkc6O9+ZVr3r4rfuv+FDrfOk2pArLCKi
        P8u37S4ftv17E0u9K3LxEWIAA2GQlMikUu+jZ54QPudJOXu2NU6lIVlYRETvynJyzMjArUcV
        dswpMMRaKMXD4iEzxoahgBcYYi3ji9rnVHga5q2aOXPI3gUyZAuLiKh27tzoRcW7Hzu61H9h
        sS20izGesmeqYUoI2YAxrpYVhOqPLvVfuK6w4bFseBRXOg2JTwkPZ9+DHz+6+v77z3h7a/nS
        PV3WixKKOKSLGvKDXlLUCnvwpdOrdt/0xwULGrXOkwl584v72Pz5TUdXtF99cmXLbRZ9op0w
        q4PcxS36RMfEIt9vTh62/ep8KSuiPCosIqI35Nld37HtXTK5tPmSImukTtDoPkSAgRIYV4ot
        4U0TS7yXnl/Y+MAzstyldaZMGvJTwoPtmyK+ddacpd/fpSuWm4OWq2JJKa+KG3KTUUqqVY7O
        P44va7nrZXl+00daB9JA3v6ivrNs7h6XGLr25KrWi52m7p3Z+KALACIiRsRdpu7dp1c1XnIG
        dV/7sjy/SetMWsm7EdaBPl01M0FEtefOX7F5Z6fjrp3tBd+PK6JJ61wAX9OLyWilI/jmKHvw
        zr8tnvWF1nm0lrcjrAP99f5ZG04Y2XLZpDLfrGJruIMw2gLt8UJLJDCpxHf9FPv6n/9tybV5
        X1ZEeT7COtBTN98cJqLV8xbf/c5r24b/rrHTWhNJ6Axa54L8Y5KSsTJ76LkzR+2547H585vW
        ah0oi2CEdZAlN9+xa0zZjpkTh3kvLbGFN4iC2utiUwzBINUEQVWLbZEvji1rueRYa9u1j83P
        32tVh4IRVi/2rRZ+6fL77vvPp/WlN9QHbFeEY3oXP2CBO1a6Q6ow4txiSPgr7V3PjC9pebB2
        iN4HmAoorMN48tZbG4jopgt+s/T5Oq9nwS6//QdJVWBEGGFBauhFhY9wdr58dHHbor/cPe/T
        jVoHynKYEvbBX+6Z+8mwsh3TzzmqvqasIPShQVSTGGHBYOhFRSmyRN4/sXzvj6onBC79y93z
        PtU6Uy7ACKuP3pXlbiJ6qUZ+4AN/2PJTuzH+KyIaTUR6jaNBDpEEVXEYuxsqnKGHKmxdz796
        742tWmfKJRgoDBDfMrWQSLqMGM0iohFa5znQ1S+dTav/M0HrGHAQjyXSVekIPfLtYW0P//5W
        XKcaCIywBogd9a6PiJbxtWc/Tna6ijifScRGE6bZcABGxD3WqL/K3vXE1IrGJYtvkVsw9xs4
        FNYgsePf7uScHqJdZ71MSTadiF9BjI0lTqLW2UA7AuPcZog3jXAFXisyxh85xdq6Ub5FTtl+
        bPkKhZUCjBEneqeec1pCu856gRT2YyL6FRGNJFzjyisCU1WXKeYf5gw+W+3oeHyyGNwgy7L6
        ltbBhggUVgp9XVxEtIy3fG8Vdak/IsavJs5OJ8KIayhjRLzUFqqvdAYfm1K5+4llc+/Zs56I
        XtE62BCDwkoTVvJWmIie5ZtPfY0E00nE6VfE+FlErFDrbJA6dkMsatInP5pQ5K1Nqrradx+c
        2f4RlumlDQorzdjYD4JE9DZvnPIBRW2TiNRLieg8IhpGRLhXMQdJgqoYJcU3xuP/zCzFHhxl
        b1v7hCwHtM6VD1BYGcIq1kSJ6GMi+phvPG0RibrziAmXE9EUwt9DThCI8ypn164CY3zV6SPq
        X1sxT95IRPS+1sHyCH5RNMDGvbeXiB7ja4/7E9kdo4mznxHxc4nYJMLfSVaRBJV7LNF6iz7+
        jwnFHS/EOulfb6yYHVuvdbA8hV8ODbHjP00Q0UbO6U7acuojJBknkUoXEqepxKiSiAxEDIt7
        M4qTTlRUvcj3lBeENjmM0acrXaE1NK58V+302XgGgMZQWFmAMVKJPmgmombO6U368vRy0utO
        JWLnEOPTiDM3MS6ivNKGM8ZVmyHeXWkPbkgo4pPfrmp4ryKR2CjLsvqx1ulgPxRWlvlqacS/
        G4noz0T0Z75+koWsxWeQwqcR0UlENJmIjJqGHCJ0gsqLbZG9xPg/Thq298PRpW3P33ftfR1E
        RFu0Dge9QmFlOTb5izAR/ZW/QG/SlCl2iloridTvEbHTifPRmDr2FSejlFSNuqRXFGjz2KKO
        TYk4e7aoILlzRPFG34rZK2JaJ4QjQ2HlCDadFKI1fiLyE9HnvG78Q2TwVJLCxhCJJxLjpxDR
        JOLMSpxMlOf3NAqMc0lQEypnwRJb2F9mD30Sjuv/MsHtrdcXtGx86uYlYa0zQv/hX+UhhG87
        zUOq7vgrX5x27McNJafHktKJTZ02e2LfpoNDnV5UeGlBuEsS1HVJhb0/qcxbX+EK/OvhufIO
        wmLOISEvfpDzEJNl2fB+tNQQiVChyxo9yxcxH7PJ6y4WmTpSEqgilJAckbhOoBz7GWBE3GaI
        q1ZDvFPl1BRXxB2jXQHvcFdwfZz428GotdUZ3xyvXbasm1BSQ05O/bDC4MiyLDURlezpdnnq
        2hwWh1GttuljJ4aT+jFtQVOhL2IyiQIvEBi3cs4MCmdSQhEElRNL/48KJ4GI6ySFi4wnBMa7
        FVUIcc6CHms04jZH20265NZIQvo4mRB3TSz3hke6/b5Kydsyc+aqRJrDQZZAYcF+i5+cZ2ls
        tY5ojVgrAhGDc2/IYt7tt+uthnil3ZSo0jGlVOXkSaiiXVGZOaZIhkRSkLqTohhLSgIxIkUR
        KK4KTGCc9KLC9aJCkqhyvaQqApEqCUpSJ6pxo5QM6QU1wATelkwKzR3d+vqOiLm5yhlIVjmC
        oWJbxF9V2Fk/ztldP336sqjWfzaQHf4P6LIfWY6S/p8AAAAASUVORK5CYII=
      </shape>
      <shape name='Flags/switzerland.png'>
        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
        7Q8AAAAASUVORK5CYII=
      </shape>
      <shape name='Flags/tanzania.png'>
        iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAYAAAB5fY51AAAACXBIWXMAAA7DAAAOwwHHb6hk
        AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAIABJREFUeJztnXlgVNXZ
        /7/n3tlnMknIQsgy2UFRqxaXiqiAy/tqtYutbIqIFYKo7LtdUtlFtGpRQQutxS1o37ba3bfw
        e2utIgioIEtYE0LIvs0+957fH5NBEGayzMyZmeT5/AXJ5M5Jcu+Te879ns/DQBCd7Nlzm/lw
        k6eww8Vs7T4p1a5wY5OL6fQycgwaVgwgG0Aa59yqcGZSVOg9HFpFhayASyr3H4dzxnwcYIxz
        DQO0jHFJgioBqszg00hwa8DtssRaGHiDj6PWpbDjTh+vytBxd6oBdrPMmg1Mqc40e4+PGPHv
        9lj+XIj4gcV6AIQ4yreO1Fzp1WY2qL6MUw45SSuhVA9+lYejtMOH9A4fMzLACs6TIDGdyqFR
        OJc4Z0LOE8Y4lxlTJQYfONwc6FA5b0/SMEeKFvVame/3KNIOF+dHM7SqI9sgNQxKbT511VU7
        vSLGR8QeKlh9E7Z160j9QZ9G73F6Bhgk7ehWlX3ztAMDNYwXMsDm4SzFrUIGT7BzgIHrJah6
        CW0AqgFemWVkp1P0fLfTi61cx04P1vjco0ZtcwPgsR4uEVkS62QlgsI52N+2/VfxUacy6rSd
        52kYG+7j/KoWH6yKKuYOKdZIjPNkLdp0Ej7xcXyYb2LH85Kw7eYR7x9ljIpXX6BfnMh9kYqt
        Iy1OtzS0yinl6cDvcChseIsHGQC3qoBG1DQuXumcXno5R3uqDk0WLd/uUfgfCizqUYu7fd9d
        d+10xHqMRM/p1yd1IlFRcYmuXZ+S7pYNxT4V91Y7MFRiGOxWWIaPQ4r1+BIBLYOqk3kdY2x/
        lhH7uaq+oZdwOF8+0XDHHZXuWI+P6BoqWHHOu1tHptc65LEnnLhK4hjd7mW5XipQEUFinFu1
        7JQE/s8SK/tXgcm15YYbPmiO9biI4FDBijM4h/SXf9180ReNbISPY3yTm1/tUZmRM87Qz6d5
        UYNxzsBUgwRXqp7v8Sls8xAjPrjnjvf3MgY11sMjvoIugDiA83vkzX+rLzzp0Az3qHxCm5cN
        VYBsnwo51mPrj8gMqpbxmgF6ts+kUTcbZfZxqUk5MmrUNl+sx9bfoYIVQ5778+16i+S9ocbO
        x7pU3Nrmha2/L5bHGxLj3KzBSaPM/lFg5hXNqm7rjDv+QutdMYIujhjwynsjLz3llu9iYA/V
        u3mhSkUqIWCM83Q9O6qX1Q3FVv7eD0dv3RvrMfU36EIRxGvvjUit5cZvur18RoMb1yoc6Sqn
        KV8iIjEoGsYbBhqxC5w/U5qibv/+qG0tsR5Xf4AKVhThHOz5LTekw6C7+7QTYz0c33IpzBjr
        cRGRQy9zp17Cxzlm/pasqm9PvXNbI4VUowcVrCjxxh9uzT7u4w92KJjS6uN59ISvb8MY56k6
        djRJi005Bs9vxv/X/1XFekx9EbqIIkh5OaTCa2++9LSbT2zySPc7fEjjNO3rVzBANUi8OVXH
        3sg0K69UfbT18/JyikZECipYEaCiAvJp8y1D21x4uNWLb7tUnkdP+/o3jHFukFh1uoH/0Qi2
        fqAndd+YMVuUWI8r0aGLKkw2/Wlk1mm3NLfFyx6wKywt4ewHRHRh4EkatJQkqetuG8B+kXvt
        /zbGekiJDF1cveR//jKy4EunpqzVy6c5fCwl1uMh4pccEzC1BEjV82qAPQfu28SGbGuI9bgS
        ESpYPWT9X28Y1OLUTWhy41GXyvIomkCEotAMjC0Ask1nPuQB5/vB8SS07D1W/H5r7EaXeFDB
        6iabNo00eDM13znegdl2BVcrVKiILrCZgfEF/jus8+FOcPZ3qHw17C07GFlTuwUVrG6w/k+j
        rq13yovrPfw7lEonukO2EXioBEg3dPlSDzh/BRJ/mpX+87CAoSU0dPGF4LU/jc4/6pIWNHsw
        3sN5CmWpiO5QYAbuKwIy9EA3zxgV4DUAWw/ue4nWt4JDF+AFWP/uMFOrz3p7q1f+WYcXl6gg
        /xTRPQrMwJgCIPeC08Au4NwHCf+CT/051Lr/sEv2eiI9vkSHCtbXePXdW2yHPVja5sFYnwp9
        rMdDJA7ZRuCBYiAr3M1XDM3g/GW43KvYN0goeDZUsDpZ/+4wU4MneUKrV3rKqXBrt2/mCQJA
        ngn4UQmQqovQmcOgQsVxSJgNHPsrKyWFM0AFCwCw7k8jr2hwasqbvbhVUdGbm3miH1NoAcbk
        B3saGDatAH8TXuUpdsm2yqi8QwLRrwtWecUluhRT9ndPdfCnHCryKKVO9JRcE3BvYdSKVQAV
        wD6XU505c90//7VhA/ptBKLfLiav/f2NeZxlvXysTX3LocBGxYroKYHoQpSLFQBIisovXV9R
        /deP/s/8yi0jUm1Rf8c4pd9dpOXlkJKG3frfdQ71KaePDeagACjRcwrMwIRCYKAh+qudLo+K
        TW/XYO6qg3C7VTVjgO7A0BLzvJs+bv5rOfqXCaJfXayb/3ytFQOHzqx28LUuleWhH99hEr0n
        /6ztNtEuVh6vio1vn8TitYfR4VDAAWZ3KukNzd47GodY2IhvmD/fd8TVbxbk+03BevUft9gq
        23Xral141OdfWO93d5dE+ASiC4MEeWPXvVaFJWsPo63jHDMN83i5saHZO7rNoV50+/UZH39R
        2dEvFM19/qItL4eku+Km6zs82s0dXuRyuqsieonNDEwqAtK7n2DvNR6vipcrTmLuyoNwe0Ia
        l9WB6bpTBTn6cbd/v/3Dvi4L7NN3WBUfXmdss1w0udElvehUkA0wKlZEryi0+KeBg4zRL1Zu
        T2AaWAmHs8v6w+wOJandrny78ZS5bdi16V8ePNjeZ58i9tmCtX7HMO3pU0lra11skU9lqRQE
        JXpLtlFIdAEAwDnHy1tqsPj8aWAomNvDLY0tvtFGGVllN7n/sW0f+qTdtE9exC//8bbCU17l
        Vw1ujCRVMREOX8n3ov9ePh/HuteqsGhNJVye3s3sJAZuyzH8vysusz70+7/U9Tn7Q5+7w/rF
        H0bfWOXCy61eDKdiRYRDodl/Z5UhYIHd5Vbxq7dPYtFTlXC6e78MxQHW2u7Lb2z0DB9xpfXA
        4SrX8QgOM+b0pYLFfvHeLf91yoENDoVdSlNAIhxsndEFEdNAr++r6EK7PSIzOeZwqjmt7cpN
        116eXHnspKvPbOnpExd1RQXkasMtP6h18F87qVEpESY9kO9FhGd/cwI/fsafs4o0yUka10WF
        psm2IW1btmxJ/HWthL/DenfHMNOhjqFzTzvZ0y6V0cZlIizyO6MLGQIS7G6PP7owb9VBOF3R
        SSO4Paqmpc13h+q2qLfdnvrpZ5/ZE/oJYkIXrHd3DDN9fiJlaZ2bzfGSZYEIk0DDiEECEuxu
        j4pfbTmJxU91K7oQFl4f17a0ea9zt/Ok71+f8cHOBI49JGzBWv/uMFNNa+qqk072mMpJtEeE
        R7YRmFh0TnebqLLhrWosXlvZk+hCWCgKtI0t3mt8Ek+6YVTm/9u3r80n5I0jTEIWrNffHZle
        r5pfPGHnD1IYlAiXPBMwpVRMgt3rU7FucxXmrToU9Turr8M5pNONnmtVh892wzDDv/Yf9TiF
        DiACJFzB+s37N6dVOeUXTzn43Rws4cZPxBeFFmBcATBQQILd5e58GvjU4aitWXUD1tzmHapw
        bfHwKwzbDh7zOGI1kN6QUBf8r/5wfdJpt2bTKSf7HgfTxHo8RGKTZ/IXKxHRBUXh/jWryEUX
        eg3nkJvbvBdpNNqh112c/N6BKkfCNLtImIL1m/dvTqt1aX9d42TfA21gJsIk2+ifBg4UEIJR
        VY5fbq7CwjWVUYku9AbOIdU3eYdo9dLF11+pfz9RpocJUbB+9/7Nacdasf6Ui30HVKyIMCkw
        +xfYRaxZuT0qXqmowYInD4WVYI8WDS2eUpXLxd8eZfznnv3xX7TivmCtf3eYqcZtWH/Kie/T
        NJAIl1jK9+IRziG1tPsGu73a7FE3e/+2bx/i+ulhXBesd3f4owtVdjxIC+xEuGQb/aFQUdGF
        F9+oxuKnxEUXegvnkBubvZdrVYvlO9el/yuec1pxWwTe3THM9NmJ5GU1DvYoRReIcLGZgB8J
        ii54vCpefKMa81YdhCN2TwN7Cqtv8lzt8KnG79+T8cHOnfFZtOKyYFVUQD7QNnRuvUeaQ6FQ
        IlwC8r0skfK9pyoTqVgB8E8P2+y+K1xt8N44yvPhvn0IqTqNBfFYsNg1E2754Wk3e9pH222I
        MMkxARMKxEQXVJXjlYoey/fiCkWBtt3uu84I68Hq0+59sR7P14m7gvXMH0ffXuvCGx7ayEyE
        SbYRKCsFMgVEF3yKP7ow/8lDsMfpAnt38fq41u5Q7rzuCsuOYyfdcSUBjKuC9Ys/jL6x1sk2
        OBWWGeuxEIlNocUv3xNRrFxu/0bmhU9VxjLBHlFcHlXb3qF+65rLk3cfP+k6EevxBIibgvXy
        H28sPOGSX/bL9wii99jM4hLsXp+/WC15+jA6YpxgjzROtzrAblcuvX1Exv9+ecTeHOvxAHFS
        sCoqLtEdVZO3tPkwnEyhRDhkG4HJxf4FdhGs21wVF9ttooXTrWY73MoVt/637/V9cdDYIuYF
        a/27w0ynWcbTp934ITnYiXDIN/ubnGYISrC//FY15q061GemgUFgbR2+fKNkHTDs2rRtsW4h
        FtOCVc4hKXsvfrDWhYUqZ9pYjoVIbArM4vsGLhIg34sHOMAaW7yXGiR+qqzes2sbYhd3iGnB
        uu3Km0c0uNgLXs5SYjkOIrHJNgL3FYlZswKAl9+qxqIESLBHEkXh2g6Hck3TYMuHNfWeqliN
        I2YJ8lf/cYut3YPXPSroiSDRa3JNwNRSIEtAwwivT8WzvzmB2SsO9qtiFaDdrmQeP+V+Y8Id
        g/JjNYaY3GFt/vO11sp23bo2L7uGtt0QvaXQAowvECzfWxtT+V6sYQ6nktTm8ObfOSL5r59X
        Ot2iByC8YJWXQ/JmXjS73sUeUUkVQ/QSkfI9XxzJ9+IA5nSpQ0wmXduPat3/2SZ4PUt4wUj+
        5uj/qnGweT5OxYroHdlG4MEScdtt1m2uwrzVh9DaHtfmFWF4vFz67EDHgm1XW28T/d5C77Ce
        ffcWW62T/dalIg99pIkrIZaAfE9UdOGVLTWYv7rPRxd6jMfLDQ6X+s0br035Y+UxZ5uo9xVW
        sMorLtG5lKRn2rwYDZoKEr2gwAyMKRAv30v0vYFRgjld6gCTQUr77t3eP+/cCSEVXVjhsOqz
        7m7x4j5OxYroBdlG/97AXGF9A09i4ZpKmgaGQK+T5El3Z09YO23UcFHvKWRatu5PI6+oapd/
        b1dYzB6HEomLzQw8UASkCZLvbXjL3z7e7Yk7HVTcYLXIWD6nBA9PyIUsYQ/A7maD3z8S7feN
        +t3OuoqRlkanXG5XYYv2exF9j0B0Id0grn38krWVVKxCYDHJWD67BA/dkw1ZYgDYZQAW8kMl
        UZdtRr1gNWuk+xo9+C/QPkGih+SagLH54p4Gbny7hqILXaDXMSydVYSp43Jg0J9ZApcAjAWz
        3RHt949qEXnxLyMLjrVpdjt8SI7m+xB9j4B8L1WAIFvplO8tfqoyLltxxQtJZhlLZxdj5v1B
        JkucH4fkuZqV/qs+WmOI2h3W+neHmU47NE84fNwarfcg+iYFFn93GxHFyuVWseGtaixZS8Uq
        FFaLjBVzSjBtXG7wFzHYwHWP80O3R+03F7WC5eSpt7d5MIb8VkRPyDcDY/KBQYLke5ve8UcX
        Eq1hhEj0OgnL55TgoTE50OtClQzGADwA5onaU8OoFKzX/jQ6v86Jcq9KHW+I7pNtBO4vEhdd
        ePH1aix4kqILoTAZJayYU4xH7s2FQd+dcsGSobKf8gMj06MxnqgUrKMuaUGHD0OjcWyib5Jv
        9m+3SRfwJ87tUfHC61VY8OShuO3IHA9YLTJWzy/FjPttYD2aKPHrAXlKNMYU8YK17r3Rw1s8
        GE8BUaK7FHQ62DMFRRcCfQMpuhAcs/Gr6IJG09NfCtOCsYf5/lFDIj2uiBaVTVtHGprd0hI3
        5yTkI7rFICMwvlCcfG/jOzX9Tr7XU3RahidmFqFs/DnRhZ6SA0iz+Y5hETUJR7Rguezy9+rd
        /A7KXBHdIdcETBMt31t+gIpVCKwWGWsXD8bsyTZoNWGVBwkSHkRy6vWRGpv/oBHiV3+4Nfuk
        g81SqVgR3aDQAtxX6I8uiJDvvVJxEj9+5jBNA0OQZPZPA6eMyenhmlUwmBYqX8D3XjcgAgcD
        EMGC1ehT7+vw4apIHY/ou+SZ/NGFbEHyvUB0gRbYg6PTMiyfU4wpY7uKLvQQhlHQmW6P1OEi
        MrLX3r+lqMGL6QqPfdswIr7JNgI/EiTf49wv35tP8r2QWEwyVs0rwWMTbZEtVgAAZgBn8yIV
        c4jI6I634WG3wvIicSyi71LQ2TcwVRf993J7VLz05kksWlMJez9oxdVbrBYZK+eW4NH7onr5
        DgXkSZE4UNgF67d/vWFQmxdTyc9OhCIg38sS0DDijHzvqUq4PFSsgmE0BBLs2dBqo3r56iDh
        seOfTUgN90BhjbKiAnKNUzfP7gPtFySCkm0EJgiU771c4W9yStPA4Bj0EpbNKsbD43PDiS50
        mzpHWv6ze340456Ke8J6s7AKVpVm1KXNHjY5nGMQfZs8EzClFBgoILrg8ap4/rcnMHdl/+wb
        2F2sFhlrFpZi1gM2yHL0H+ofacvD3I8WY0/TRY+ltU2/OJxj9bpglZdD8kCeZldAIVHighSa
        /XdWIkyhrk753uNPU3QhFBZzIMGeA0mKfrGqbLVhxe5p+LK1GK2epAHtaurU8vLyXtedXn9h
        3rdGXdbkwbfBqfsNcT65JmBsgZingYrKsYnke13il+8Vd8r3orvkzDlQY8/Asl3TsbvpYgAM
        nDNWYx/4XWXoFZf09ri9HnWdQ5rsVnkIOQ7RXxlkBKaUiMlZKQrHL39bhbmrDtKaVQiSzP6N
        zLMm2aCL7gI7AKDKPgjzPl6EL1oG42xPaIfPlLe/qfSB3h63VyOveHd0TrMH93JKtRNfo8Di
        jy6kCIgu+OV7fgc79Q0MTkC+9/B4MfcXh1rzUb5zBg62FeLrUmOVS6zOmTZxyW/fGdSbY/e4
        YHEOdkyVJrtUFvYjSqJvcUa+JyC64PUG5HuVJN8LgUH/lXxPF/FQ6LlwDhxvz8aqPWX4rHkI
        ghnYHT7TgCPOIfcHfUEIevwdPL/lhvQ2N6ZwSrUTZ5Fj9HdkFhVdeOnNauob2AUmg4Tls4sx
        fUJ35XvhcdqZjsWfzMWeposQqhapnMktLsvk2RUf9vimp+d3WEbtD1p9nFLtxBkC8r0MAfI9
        j0fFC6/5t9vQAntwrBYZqxeUYsYkm7CngQu3z7/gNPBCNLhTBzs6+Hd7+j49KlivvTcitc7J
        xpI+hghQYPE/DcwQ1Tfwbf80kKILwTGf1TdQIyBndbgtD6v2lGFvSym6O8vjXGLHO3LvLd+0
        qUexqB4VrBqfYZhHxbU9+Rqi75JtBMbni5kGcs6x8Z0aLCb5XkgiJN/rFpwDp51pKP/0sTPR
        hZ5g9xmHH/Fe3iPDi6YnL1ZUzHIpzNijURF9khwTMLVETCsun0/Futf8a1Zu2hsYFKtFxrLZ
        xXhsopgm68c7crDkkzndngZ+HYfPaPSo8kwA73f3a7p9h7X5T7dcVu/C1T0eFdHnKLQAEwvF
        9Q18ueIkHn/mMBWrEFgt/mng1LHiogtLd03vdbEKcNKefdWKis3dbljT7YJ1zMXv8nFEpXUP
        kTjYRMr3zuobaCf5XlB0WoZls6Mg37sAnANVHVlYuXsa9vRiGvh1PFybsbf5G3d29/Xd+u6e
        +/PtepWTQqa/k230h0KFyfdeq8Z86hsYErNJxsqoyffOp8aRiYXb54fMWfUEnyrLTkU/5bHn
        /tyt+/VufYdJ3HNjgwdiJsZEXFJgBiYX+zcyR5uAfG/hmkq6swqB1SJj1dwSPDZRTMqostWG
        H+/o/ZpVMKrsA4uTBrAR3XltlwVr69aRmpNOjKNtOP2XgHxvoAj5XqBv4JpDtGYVAtPZ8r3w
        utt0iyNtuVi5pwyfN5+7NzASqFxm+9uKxpWXl3f5ELDL7/RYh7bQqbJbIzM0ItEQLd97ZUun
        fI+iC0Ex6CUsnVWMaaLke84B+MnOWRFZswqGw2e4xVV8ZUFXr+uyotV5lRHtPpYbrYES8Uue
        yd8wQoSD3etV8dKb1Zi/+hCFQkNgtchYPqcE0yfkCkmwH2nLxU93zsKB1iJEswY0eZLz6905
        1wCoDPW6kHdYnEPyQKLpYD+k0OK/sxogqm8gyfe6JCkm8r2HsT/KxQoAFFVm7V7jvV3J/UJ+
        csv7t1zS5ubdzkgQfYPczuiCEPmewrHpHZLvdcUZ+d5YUfK9TCzbPb1XCfbeUuvMuMxw6eCQ
        CuWQU8Ijdj7cx1l2ZIdFxDPZRuChEv+dVbRRVI5fbq7CElLEhMRilrF0VjFmThLzoL7KPgiL
        ts+L+NPArvBybfauxstHANgb7DWhp4Qqu8/HKXvVXygwA5ME9Q10eVRseJN8Vl1htchY2blm
        JQK/fO8x4cUKADyKLHOOCaFeE7QYvbt1ZHqTB1dGflhEPJLfGV0QId/zeFVs6rQukCk0OOfI
        96KsNeYcONae0ynfC+2zih4Mpx1pw/5n6zNBDQ5Bfwq1DnmsWwFtdO4HZBuB+wXK99aTfK9L
        jILle3XONCz5ZE6X8r1o41BMhl11RfcE+/wFfxIVey/RnXCwazjj9HSwj2Mz+6ML6SLke14V
        60i+1yVWi4wnF5RipiD53uE2G+ZvXxiTaeDXUcGkXfWXDC+vKL/gwsQFC1bjkYEZEvhoEvX1
        bQotwLgCgfK9Lf6GERRdCI7lLPmeiCanh9tsWLm7DPtaShDrYgUA4GAql0Y7lOEXFC1csGCp
        kArbvPR0sC+TbQTGipbvrT1M8r0QnJHvjRMj36t1pOHnnz4qNLrQHRrdqbmN7tTCC33ugrEG
        L+f3+Tijp4N9FKHyPYVj3eYqLFpTCRftDQxKklnG8jmJI9+LJl5VI2m5ZwKAf3/9c+cVpYqt
        Iy21ToQMbxGJi3D53lvVePxpKlahCPQNFCvfeyQui1WAI222iysqnj7vod95BcvploZysIvE
        DIsQic0sTr7nPVu+56RiFQydlmH5nBJh8r0THYOwcndZzJ8GdoUCacghOf+8G6fzfkJVDuR7
        FDKL9jWyjcADRWK22wDAC69VYwHJ90JiNspYObcEj9ybK0S+d8qRiUXb58UwZ9V9XD7DwM/r
        S4q+/vHzfkpGSbqT0u19i3zB8r0X36jGwjWH0EHyvaBYLTJWzS/BY/fngQl4GF/ZasOSKMj3
        ooVL0cpayfftr3/8nMLEOViHj1Mbrz5EgdnfN1CEfM/dKd9btIYUMaEwGTsT7PeIku/5+wZ+
        EQX5XvRgaPEkX8f5uQM+56f13j9uLWn2MJoO9hFEy/d+9bZfvkfRheDodRKWzizGNAHRBcAv
        3/vpzplxF13oDnXOAemvvPt8wdkfOyfWUO3jIwFuTbRvjDifPJPfupAiQr7nU/Hi69VY8CTd
        WYUiIN975N5cIdPAI225+IkA+V60YAxJRzqKRgI4GvjY2QWLnbLzPLWHzVWJ+KPQ4n8aKCq6
        sOkdku91xdnyPVFrVqv2lCVssQIAhcvaA60l+fB/Axw4a0q4detIvVbC9WQXTWzyhMv3/NEF
        WmAPjl7HsLSzb6AI+d5JeyaWC5bvRQOVSwyqOrx806Yzf3rP3E0d9Gn0CufDYjM0IhJkG/0b
        mUXI91SS73ULi0nG0llFmHm/mAR7tT0LC7fPT5ingV3h5bqrazyX6QG4gLPusGSHL6PFC2vM
        RkaERYHZ3+RUhHzP7VGx/s2TWPwUFatQWC3+nNX0e8X0DTzUmo+f7ZzZZ4oVANS5BiTr9XVn
        HgR+dX+qk29WVJoOJiKBvoFZguR7GwPyPTcVq2AY9V/1DRQn35sasY7M8YJP1bBkg3Jj4P9n
        fpItbnZFbIZEhEO2EbhPoHxvw1snSb7XBUaDhGWzi/HwBEF9A10B+V5ir1kFo8GV9s3AvyUA
        2LFjmLbBzQfGbkhEb7CZ/dGFDEHyvV9ursK8VQdJvheCs+V7shD5Xh7mfxwf8r1ocbglN3vr
        Vn9XaAkAqhvNWTJw3r4dIn4JyPfSSb4XN4iW71W22rBy97T4ke9FDVa0q6NwINBZsBoUXToY
        E7MySIRNjkmcfE9Vv5Lv0Z1VcPQ6hidmFWGqIPneKUc6ntgVf/K9qCCxvOqm7EygM9ZQ64LZ
        pSI5tqMiukO2MQbyvacq4aIF9qAkmWUsm12MGYKiCyc6srH4k7l9ehp4Nm6fLuVoR7YZ6LzD
        0koo9ahkaIh3Ci3+7jYi5XtLnqZiFYqAfK9snDj53hO7Hu03xQoA7IpRMkqufKCzYOklfhV4
        P/nuE5RYyfccJN8Lil7nl+89RPK96MLBLHr3MKBzSuhTUBrbERGhyDYCk4r83W1E8OLr1Xj8
        adpuEwqzUcITM4uFbWQ+5ciISfv4eMGt6C8GOgtWm48Mo/FKvhmYWCSmb2DAZ0XWhdAErAtl
        48RtZF62a3q/LVYA0OhKyQQAaevWkZZ2LwTFDomeEJDvZQqKLmzs9FlRsQqOWbB873BAvteS
        SPK9yNPoTjW9+rc1Zo0dKJAYSwKdo3FFthEYXwgMOq9vSHTYSPK9LtHrGJ6YWYyycTlCilWd
        cwDKd87Al63F6M/FCgAY40ktzrR8TZOL2cB5Un//gcQTeSa/dUHERmaS73UP0fK9o225+PGO
        2TjQj6eBZyNDsdi9Sbmadp+UConpQH9Y44JCiz8UKkIRQ/K97nFGvjdGzJrVodZ8rN4zlYrV
        2TAYGj3WARq7wo2qyrSxHg/xlXxPRHTBR/K9bqHXMSzrlO+JiC6cdAzEit3T8Hkfsy6Ei8Jl
        Tb0jw6xpcjGdAs7ohxNbso3AgyViWnGpqj/BvuQFVhHaAAAgAElEQVTpSspZhcBikvHErCJh
        CfaT9iws6EPyvUjiVTXSCftAvUavRY7dRR6sWFJg9ne3GSBIvrfxnRrabtMFVot/Gjh1XI6Q
        9zvUmo8Vu6dRsQqCyhkzSO4cjUFCcawH0585W74Xbb6S7x2mYhUCo+Gr6EK05XsAcLQ9B6v3
        TKVpYEgYrFp7vgYcYv6EEOeRYwTuLfQ3ORXBhrf8ihiyLgTHqJewbFYxHh6fK0QRU+ccgMc/
        SZyOzLFEI6lZGoClxXog/RGbGXigSMyalcerYsNbJzFv1UF6GhiCQHTh4Qm5wuR75TtnULHq
        JhzI0HBQBks0gb6B6QL2BgYS7CTfC8058j0BxSrQN5BCod1H4VKKRuGMtuUIJCDfExFdUFWO
        jW+TfK8r9DqGpZ3yPRENI2qdGVi66xHsbSkFFavu41W1Fo1XhYBJCQGIle8pir9v4OKnqLtN
        KJLMMpbOLhbWN7C/yfciiUfR6jU+DgqNCqDAAowX3D5+CbXiCkkgujBlrLjowqo9ZVSseokC
        SaPxqYh+H6J+Tn6nfG+QaPkeNTkNil4XiC6Iku9lY9WefijfiyCKKssaTqbRqJJt9GuNSb4X
        P5iMEpYKlO/VOjNoGhgBfKpG0tC2nOghWr73K5LvdUkgujBtnJhiVdlqw9Jdj1CxigAermEa
        OrWjQ0FndCFTYHRhMcn3QmI2ymcS7BqNmJzVqj1l9DQwQvi4FhrOaR9hpBlkBMYXCJTvde4N
        JPlecHRahidmFpF8L4HhnDONSn+QI0qeyd8+PkWQfO+F16qxcA1NA0MhXL7XnkPbbaKADBUa
        BpAdOUIE5Hsiows/fobke6EIyPemCJbvUbGKPJLEuUaWOFdVmhaGC8n34g+dlmH5HIHyPXsW
        yfeiiMRUaDSMcS/9dMNCpHyPc7987/GnK2En+V5QLCYZT8wswmMTBcn3HANJvhdlZKhcIzGa
        EYZDTOR7ayrh8lCxCkYgwV5G8r0+hcS4qpEZFIDS7r0hZvI9KlZBOVu+pxUh32vLJfmeILSS
        R9HIDD4AAu4P+hai5XsvV/j3BlJ0ITiGGMj3qBWXOPSyx6vRSHAD1Pm5J+SZ/GtWIqaBHq+K
        9W9WY/5qii6EIhBdmD4hF5JA+R4VK3HoJJ9L0oDbYz2QRKLQ4l+zStNHv328y6PiV1uob2BX
        WAJ9A+/JEVKsKlttWLl7GoVCBSNLql2SJdYS64EkCrmd8r0cAfejisqxieR7XeKX7xVj6rgc
        GPTRjy7U2DOwbNd07G66GFSsxMK42qZh4A30g++aQUZgimj53tpKOEkRE5Qks4yls4oxc5KY
        6EKVfRAWbZ9HTwNjBAdr1Pg4amM9kHinwOLfGyhiu40/wV7jl+9RsQrKmb6BAuV7K3eTfC+2
        SNUal8KOx3oY8Uy+2T8NFLGR2esl+V53MOi/ku/pBMr3Pmsm+V7s4Gjzmg5rnD5exRjjJPI7
        n2yj32clQhEDAC+96Zfv0ZpVcEwGCUtnFQt7GnjamU7yvThAllTu4/JpTYaRu085merjFB49
        m3yz3xQqQr7n8ah4ZctJii50wRn53ngxxYrke/GDhinqIGODR0rVwi75w6NEJwUWYGyBX2sc
        7ehCwBS6mPoGhsR8Vt9AjYBQKMn34gsJqi9V2+bQmGXWDA43QO2+AP80cLyghhGcc2x8pwaL
        Sb4XkjPyvfHRl+9xDtS50lD+6WP4sqUEVKziBrdF19qsMeiVakDTAcAa6xHFmhyTuL6BPp+K
        da9VY+GaSrhpb2BQrBYZy2YXC7MuHO/IwRKS78UdKqT2QYa64xpZ6z2ucLm9v/9yCs3+aaBI
        +d7jzxymYhWCM/I9oX0DSb4XlzC0ZWTtOyZ9d8S/2y1aOGI9nlhi67QuCJHvndU30E7yvaCI
        lu9VdWRh5e5p2EMJ9rgkTdfsHDP8GacGAJK1rL7VE+shxYZsI/BAEZAuILrAOce616rx+DNU
        rEJhNoqV79U4MrGQ5HtxTaqutR4AJAAwynx/bIcTGwrMwORiMaZQt0fFS2+exMI1lVSsQmC1
        yFg5rwSPTcwT8n6HWvPx4x20ZhXv6Jh6EAA0AODySTvAOEc/Co8G5HsifFaec/oG0ppVMEwG
        Cctml2DKGDHyvSNn5HuDQcUqjmHg7YpuBxAoWJwf1UtQ3Ur/CI9mG/2KGBGmUAB4ZYs/Z0XR
        heAYdBKemFWMhyfkCslZ1TkH4Cc7Z+FAaxGoWMU3ZtmhehTNEaCzYGUZYHf60OpWMCC2Q4s+
        eSbgRyVAqoi+gV4VL5F8r0v80QV/30ARCfYjbXn46c6ZVKwSBJPsbi5JOdYBdK5hpcueBnBe
        FdthRZ+AfG+ACPme27/dhuR7oUkyy53TQHHyvRW7p2E/FauEQQGrKtKe+GrRPTfNXssZOxzb
        YUWX3M6+gULkewrHpndIvtcVeh3DE7OKMXWsKPleJpbtJvleosE5O3pRxunTQGfBuuqqnd6B
        Bt5nvVjZRn/7eFGm0F9ursK8VQfR2k5bNINhMclYNa8UsybZop6zAvzyvXkfL8QXtMCecNgs
        NbWjRpX7gM41LABIkfmuvviLLDAD4wvFrFm5PGqn1pjke6EIrFmJ7BtI8r3EJdPcsDPw7zN/
        2lwMW2XG+9RiS35ndGGQMfprVh6vik2d1gUqVsEx6KUza1a6KEcXOAeOteeQfC+B0cke7lbV
        bYH/n7nDglZqsGp5W7MHybEYWKTJNvp9VhmC5HvrSb7XJcZO+Z6op4F1zjTayJzgZBoaW+wd
        +sbA/8/8idNpfG6thE9iM6zIYjP7owtC5HteFeteq8L81YeoWIXAapGxen4pZk6yCeobaMP8
        7QupWCU4sqRuz9ZVuwP/P1OwJo/a5lY4PmQJPi0stADjCgTK97b4OzJTdCE4ZpN8JsEuRr5n
        w8rdZdhHPquEhjGV+1TtR+WTJ59fsADwfBM7LjPmjcHYIkK20d8wIlekfG/tYUqwhyAg35s2
        LgcGfXQ3UnAO1DrS8PNPH6XoQh9Aw1RvcdLRKgBn7gbOWfXMS8I2ztEufGQRIMcElJUKUsQo
        HM+9WoU5yym6EIoks4w1C0sxZ3K+kL2BxztyMOejJXRn1VfgvH1oytF/nv2hc86im0e8fzRF
        xxvEjip8Ci3AxEJx8r2X36rG409XwkUbmYMSaBhRNi5XyPsdas2nhhF9jEGm+rop35ly7OyP
        nVOwGAM3a9h2oaMKE5sZuCdfzJ2V92z5npOKVTB0WoZlnU1ORcj3TnQMwsrdZdjTRNGFvgNH
        sq79Q5w1HQS+VrAAQAX/o5YhIa7GgHxPxJoVALzwWjUWPFlJ08AQmI0yVswtwaP35QpJsJ9y
        ZGLR9nmUs+pjGGSv4uaGv3z945qvf8Bmko41u9U6r49liRla78g3A/cVipPvbXynBgvXkHUh
        FIEE+7TxOWDRfkQL4FCrDct3T6dpYB9EJ3vqipIOn9eV/rw/gRZ30z7GWFwbSAs6G0YMFJBg
        d3fK9xZRsQqJyXiWfC/KrbgAvyJm9Z4y2hvYR5HBD9gstfu+/vHzzqy77trpGGjgB8QMq+cE
        5HuipoG/evskFlHfwJDodRKemFmMh8fnRj26APjlez/dOZOiC32Y4uQje8vuKjuvOc6F/xRy
        /no87ivM64wuDBSw3cbrU/HcqycwZ8VBKlYhsFoC0QUbNBoR8r1czP5oCfms+jA62aNKwOYL
        fe6CBUsv4bBVx6qjO6yeEZDvpYqS71WQfK8rzpbviViz8sv3HiZTaB9ngL6lKkl1nLjQ5y5Y
        sNKcp+slzv6JOLnLyhMu3/NHFzqou01Q9DqGpQLleyftmVhO8r2+DwPnqrS1+PKj9Rf69AXP
        tDFj9nqKrfxDBhbzeEO20b+RWUSxUs/I9w5RdCEEFpO/FddMQfK9ansW5n+8kLrb9AMkcPWy
        9EMflV1VdsEtgkHPtlSTa4uewRW9oXVNgRl4oFiMfM/tUbH+TX8rLgf5rIJitfhzVo/cK65v
        4M92zqToQj/BpHE6B2pObAn2+aAF684bPmhONeDT6AyrawJ9A7MEyfc2BuR7bipWwTDqv4ou
        iJPvTcVnzUNAxao/wJFlrPtkzpiHmoK9IuRZx7j6uiYGqfdsI3CfwAT7hrf8HZlpGhgco0HC
        0tnFmH6voOiCyy/f20NrVv0GnexTNNz3RqjXhCxYQ8yaDzQSTkZ2WKGxmf0NIzIEyfcCDSNI
        vhecgHxv1iQbZCHyvTzM/5jke/0NDfOevDJt779DvSZkwfr+bX/fl6rleyM7rOAE5HvpJN+L
        GyxnyfdkAfK9ylYbVu6eRoqYfshAQ+Pejn2VIXfZhJ4SMqhGDTZLAuINOSZx8j1V/Uq+R3dW
        wQnI98qEyffSsXTXIxRd6IdITOVGjeuN8vLykEtQ521+/jopknd7kkZX1eqFLXLDO5dsIzC1
        RIzPyqdwrNtchUVPVcJFC+xB8YdCizHj/qj92s/hREc2Fn8yl6aB/ZQB+pZj+dbaD7t6XZeP
        egos0lG9zP8RmWGdT6EZmFQsVr635GkqVqGIhXzviV2PUrHqxyRp29//htRxrKvXdVmwRo3a
        5rPp2ZvRaE5hMwP3FPj7Bkabs+V7DpLvBUWvY2e225B8jxCBzBR+acqh18eMGdPl+ky3zshW
        SfuvdD07Gv7QviLbCEwSGF148XWS73WFyShh+Ry/fC/a220A4JQjg+R7BHLNpw831uv/053X
        duusnHHHX9x6Wd0gMURkhTrfDDwoqG+g26PixdersODJQ7Q3MARWi4xV80ox4/48YRuZl3wy
        j6aB/RxZUhSNpLzy/Iw73F2/upsFCwBKzdIftRK/4IbEnhCQ72UKii5s7PRZUXQhOKLle4fb
        8rBqTxm+aCkFFav+jZZ5Gi617nuvu6/v9tl5963vf5mmYzt7Nyw/2UZgvED53kaS73WJXsfw
        xMxiTBsf/egC4Jfvle+cQdEFAgCQn3Tqo59O+GG3s549+nOqkfALvcydPR+Wv0hNLQWyBMr3
        ZpN8LyR++d5gzJlsE3JndbQtF7P/8zi+bC0GFSvCrHU49Mz1XE++pkdnaUmyb4dBRrcWx86m
        0ALcWwgMIPle3CBavneoNR/Ldz+MA7RmRXRikp0ffavgeI9mbT0qWN8fta0l28Tf6EnEQaR8
        z0fyvW7h7xsoTr5XbR+IFbun0TSQOANjnBcknXyz7NYxrT35uh6frbKq/j5V172IQ7bR/zRQ
        lHxv3eYqzFtN8r1QWEwyVs0rwYz7xcj3TtqzsODjBficFDHEWaTrm46pHs//9PTrenzGTr1z
        W6NZx3/Fuog4BOR7A0TJ997yL7BTKDQ4Z+R794mT7/2E5HvE15AYV9KNza9smDqyscdf29Mv
        YAw8zyD9Wi/x5mCvCUQXhMr3aG9gSIwGcfI9ADjanoPVe6bSnRVxHhZtR9PFhi82gbEeLzL3
        6swdf9s/alK1fPOF1rKyjf4FdhHTQIDke93BqJewdFYxpk8Q1zfw8U/m0JoVcR4SU3mmsfnV
        xydOPNWrr+/tG9us0kajxKrO+VinfC9TQHSB5Hvdw2qRsXpBKWY9YBPiszrcloe5Hy2maSBx
        QUwaZ1VxUuWrvf36Xhese295/4s0A/4ABg74owvjC0i+F0+cI98TYAoNyPcoZ0VcEAY+0NDw
        nu7gri96e4heFyzGwPUa3waLjOaAfE/U08CNb5N8ryv0OoYnZomT751yZJB8jwhJsra9KcXQ
        9lJXkr5QhLX6Osix7csiC56fWgJkC2py+vxvqzB35UFaswpBktnvYJ/9QL6QBfYTHdmY+9Ei
        7KW9gUQIBhnrN2Y/8PewlOthn10tn41ITdbrd4Gx/HCPFQqX2++zmrfqEPUNDIHV4p8GTh0b
        fZ8V4I8urNpDPisiNMna9tYbcz64qHzMmNpwjhP2GZ3yjQ+aIeE5AJ5wjxWMc+R7VKyCotdJ
        QuV7x9uzqVgRXSJLqpJubHkp3GIFRKBgAQBU5VUA+yJyrAtA8r2u8cv3ioXJ92qdGVj8yVwq
        VkSXmGV71dDkPS9F4lgRObPZkG0NkPgqMDgicbwAbo+KF0i+1yUB+d7M+23C5HuLtpN8j+ga
        reRTskz1z5aPH38sEseL3J9ixv4KNXLNKgLyvcUk3wuJ2fhVdEGjEZOzWrWnjBbYiW5h0dg/
        StU1vRmp40WsYLHi91shsVUAd0XieBvfqSH5XhfotAw/n1lE8j0iLpElhduSqp58YfKosNeu
        AkR2saPatwPAeoThfvf6VDz7mxOYvfwAFasQWC0ynlokUL7XnoNZJN8jugvjPMvY+I7Z3vy3
        SB42omc6G7XNB7ifA8fJ3nx9QL7342dIvheKgHxv6lhx8r1lu6bTmhXRbQySpznfcnJNd5tL
        dJeI/2lmgz84As5fAkePHumRfK97nC3fExFdqO7Iword07CHpoFEN2FMVTMNDZufn3Tj9kgf
        O0pnvPIywP+vu6/m3C/fm0/yvZCYTTJWipTvOQZiwfb5pIghesQAXdsXg5MOrY3GsaN2FvID
        t4wAwx8ADAj1OrdHxcZ3ajBn+UG4PBQKDUYgwT5tXA60ArbbHGrNx4rd06hYET1CL3lcg5MP
        3/vrKdf8LhrHj96Z7zu1HVzdACBoFTpHvkfFKihny/dEFKujbbkk3yN6A083NL+Vmuz7S7Te
        IKpnI981MgUmzcdgGHyhz697rQpL1lJ0IRQGvYRls4sxc5INGgE+qzrnAMz+z+PU3YboMVZt
        e8vwzP9csfzeHxyP1ntE/YzkB2++E8BvAZYS+JjHq2L9m9WYv/oQPQ0MQWAa+Mi9uZAE+KwO
        t+XhZztnYD9FF4geopG8zryk2hlvlw19JZrvE/35hbf27wB7E51TQ1enfI/6BobmK/lejpBi
        FZDvUbEiegrzZ67+VmDc8Ua03yvqBYtdstcDYA3AP1dUjk0k3+sSvY5h6aziTvle9KMLNfYM
        LNs1nRLsRK9I0nQcz7ac+tlT999vj/Z7CTs72z8bddMrb538+5K1lTonKWKCkmSWsXSWf81K
        BCc6BtFGZqLXaCWfeln6/vEvP3BdhYj3i/6UsJO1v9v6741vn9zsdqt0axUEq0XG8jkleHhC
        rpD3O9Saj/Kdj1GxInqFxLiSYWh8tcVU9XtR7xn9HbOdbNsGddhlSZ+2tSv/bXcqGaAr5BwM
        Ogkr55UKk++d6MjG8t3T8Vkz+ayIXsDArVr7gXx91UO/nXR7k6i3FVawAKDymLNt2FBLZWOr
        7w6PlwvqXBj/mAwSls4uxoz784TkrE4707Fg+wLsI0UM0UsMGndzoalq+sayb+0Q+b7CpoQB
        Ru9sff8bQyxrdFpGC1nolO/NL8XMSTZhTwMXbp9P00Ci12gknzrYenx14an3ohYQDYbQOywA
        2AbwS680f+7u4KUt7b5+/VjKYvKvWYlqH++X79F2GyIs1ExT4zsDLcd/+uSMKRFx3/UE4QUL
        ACorne7RN1i2NzWpP7Q7FSv64dWj0zIsn1OM6ffmQq+Lft/AOlcaHt8xh4oV0XsYeKq+pfq6
        gZ+Pf3L8nXWxGUIMueaypOv2H3X8rq1DyYrlOESTZJaxfE4xHpsoJrpwtD0HSz6Zi0NtBaBi
        RfQWs8Z5Osdc88M3yq74IFZjEL6GdTbbP2//eHCB6cd6nRT1wFm84C9WJZg6Vlx0Ydmu6VSs
        iLDQMq8jx1z7syGnfv9hLMcRkynhWfDrb8rcrwPPqK13X837+BWl0zKsnu8vVkLke/YsLN31
        KEUXiLBgjPPByUc2WFC1du28sqj1H+0OsS5Y2LevzXfn99zvNzcYb2ht8xX01aJlNspYPrsY
        sx7IF2JdqHFk+qMLrSXooz9SQgCMcZ5trNuWKn0wcUPZhIjqjntDzAsWAOzcCXXEteb/a2hS
        r3O6VDFzJYH4+waWYPqEXMgCitWh1nz8/NMZ+JKKFREWHCn6jk+uyNg38dkHxgkLh4YiLgoW
        ABw87G751hXJX7a1Kzc43WparMcTKUwGCSvmluKhMdlRfxoIAEfacrFqzzSaBhJhY9U6KouS
        Tzzy3MSRn8V6LAHipmABwLFqV9W3LrccbO1Q7na5VW2sxxMuBp0/wf7oxDwhOas65wAs/GQ+
        9rYMBhUrIhyStB3O0uSjk1558Lp/xnosZxNXBQsAjp10H/nm0KT9Ta2+b3t9XBfr8fQWq0XG
        ynmlmHF/npBp4JG2PCz6ZD4OtBaBihURDgaNy1GUXD1544+ufTfWY/k6MY01BIHf9t3W/ymy
        mZbqdZIj1oPpDYG+gSLleyt2T8N+KlZEmOiYx5FjOv2EI+nwOwDizrAZd3dYALBtG/j3fpC+
        q71RMTW3+a7lPC4L6wXR6xhWzC3BtPFiogs1jkyUfzqD1qyIMOGQmarkmU8/f0nuB6tfuHtS
        TOMLwYjLggUAO3e2eyfeMvDfDh83nm70XIcEuBotJhkr5pRg1gM2IdPAKvsgLNy+gJ4GEpGA
        FyVVPXuJfOSn5RMmxO3MJm4LFgB8tK/Nd0Op5wMYzYOaWnyXch6/4z1bvicqurBs13TsayVF
        DBEeElO8BUk1m3PT9s5ZNeluZ6zHE4q4LQAB9lXDN3K08QOfQ1PU1Oq9KB6nhwa9WPne8Y4c
        rNj9ME0DibCRmKrkmGp/N8T85cw19/6wLdbj6Yq4L1gAsG+f2znqGuNWxrQX1TV5Lo71eM7G
        3+RUnHyvzplG8j0iYhRaq/44xFxTtnLStxtjPZbukBAFCwD2HXY7b/pG8p9krTS4ocUzOB7u
        tKwWGSvnluLRiWKiC4fbbHh8xxxqxUWEjcRUpTD55HtJ2qaJz08e2RLr8XSXhClYALDvmMNz
        /ZX6f3LItuY2ZUgs17TMnQvs4uR7NqzcXUY+KyJsJKZ4baba3+UnV5a9MOnWhClWQIIVLADY
        f9TjvG24eauqyln1zd4rEIOrNyDfe2SCIPmek+R7RCTgAMDzLbWbB1v2zXxy4vcSYhp4NglX
        sADg80Nu1003e/+h5UmG+kaP0JxWktm/kXnWA/lCpoHHO3KwYPsCmgYSYSMxrpQmH38uJ23v
        nERYYL8QCVmwAGDfPvhuGJn5gdvp1dvt6pWKwqO+99C/ZuX3WYlQxBxqzceK3Q/TAjsRNjrm
        ceSaa58fmnv0J6vuju/oQigStmABfpfWjHsyP2xo564Oh3Kd1xu9vYc6LcOq+aWYMlZMdKHK
        PgjLdlHfQCJ8DBqXI9dS+8StuR+snndX/IZCu0OfuBLuuQdy9aHku/cfsf+6uc0X8X6HZqOM
        n88swpzJNjAmQL5nz8S8jxdSKy4ibMwau7PIWj3Jbl39uy1jtiR81/W+dDWwW4cPuHXXvvZf
        NrR4SyN1UKvFv5F52vgcaDXRXyqrbLVh2e7p+KKZFDFEOHAk6RyHCywnHv31Q9f8DXG4kbk3
        JPSU8OscqXIevv7q5E/bOpRLnC41B2Fe8SajX743RaB8b8WeaficpoFEGDDGebK+4xObperR
        3zx0zf/GejyRpE8VLAA4csJVdfMNSf/r80qXh+OI1+skLJ9djEfvy4MuymtWgF++t4jke0SY
        MMb5IGPdttKU/fe/PPmmPbEeT6TpcwUL8OuWL7/S91pakjWpscX7DUXp2WK838FeipmTRMn3
        crGQ5HtEmOhkj6PUeuKVAdK/7nvxR2MTLmPVHfpkwQKAY8egXn9Txv/puHrS4VCudnm4Bd2o
        BoG+gVPGiFuzWrlnGt1ZEb2HgRs1rjqb+dSSIfjPU2vLymLe3SZa9NmCBfhjD1PrPHuaL0r6
        wKfw0XaHkowQVSEg3ysblwuDXox87+ck3yPCQ03RtZ7K0DeNHXr67d+Xz5sXl+K9SNFvrpK7
        R6fk79jvWlNb7/6Bx8vPq0YWk4yls4sxa5KY9vFVHVlYuH0+RReIXqOVfGqmoeF338zcP7d8
        zF0nYj0eEfTpO6yz+fKoq3X4COvfMpN0rU0t3m96vNyIzkpxRr43Xpx8b+muR6nJKdE7GLhR
        424utFQtHWQ9/pMnx99ZF+shiaLfFCwAqKx0uh+scf/Hfrn1U7ebf9PpUtIMeknyy/eiH13g
        HDjWkYMVu6lvINE7GFQ1RddxoNh6YlrRyXdffXLGFFesxySSfnvFjL4uLed0vevnD/4w+76Z
        D9j0soDuNqedaZj9nyU0DSR6hUbyqQMNjb8ttNb+9Nn7R/SLKeDX6ddXTXk5NHO+N/JbSSb5
        WYBdgSi2PTvcloeff/oY9rXQNJDoGYxxnqS1H8+3nHzcbj3y9pYxY/r0wnoo6MoBwPffVghJ
        WQiwcQCSI338ylYbVu0pw+6mi0E/cqInaJjXNchU/9dBltM/e3HSjXHTMj5W0NXTCd97iQ6a
        rDvA2BqAFwPh73LmHKh1pmPh9gV0Z0X0FJ6s7WhL07csyOCfv/7CI2M6Yj2geICuoK/BD92Q
        Aa5fAvAHAJYSzrGOt2dj8Sdzac2K6BF62etO0bZUXJz25U/W3vvt47EeTzxBV9EF4IdK9JDz
        r4GCcnDcALAeywEPteZj1Z4y7Gmip4FE92BMVVN1rXtzTPXlOrXmrxvK7kpod1U0oCspBPzA
        yHQw+UEwTAdneejGonxAvle+cwY+Iwc70R0Y5wbJ0zzQWP9aqaX6qdX339ovnwB2B7qaugGv
        HFkCVTMH4A91dbdVY8/AvI8X0TSQ6BaypPBBxvo/2CynVj4/6cbtsR5PvENXVDfhO4ZpkZx6
        PTifC7DRAM4zm1a22rBs13R8QRuZiS7QSIpi0XR8PMhYuyY1r+4vz99xR5/dsBxJ6KrqIXzX
        yBSY5P+GxBaA4xIAOsCfs1q5expFF4iQSFBUs855YqCx7tk0XdObL0weVRvrMSUSdGX1En5g
        ZDqgmQiGx+qcAwrnfrQYX1IrLiIEVm1He5qhacNF5sPrlt3/naOxHk8iQldXmBzd9b2U5z5/
        7NHPm4Y81uK1ZnAuoEsFkTgwcKu2vSXHVM3ZTKAAAASNSURBVLtpWNrep2b/YOKpWA8pkelX
        m5+jwbPr97v++/KiD7SZKX+yaF1er6od5OWaZB6B4CmRuEhM5SaNo7ogqfb1LH39o/aUJ19/
        +p5lCdm8NJ6giyqCcM7Zz9/6n0s+b7743gbXgMkOnyFd5RL9UehHMKhqks7RNMhY93qW6dRG
        6+GPPi8vL1djPa6+AhWsKDHv1b9l1riy7m9yJT/U4E4dzLkAHQQRMxjjPFPfdCzN0LTxypTP
        N80ZM+lkrMfUF6GLKLqwR37z/gCfYrn9eEfWJLtiHO7wmiLe6JWIHWaN3WnQuD8qshzfonqV
        LRumjmwEY32iB2A8QgVLEM/9ebN1Z83Qq10+3cyT9oFXe7k2w6fKNF1MQDSSqmglT0OR5fhO
        raQ+nSfv3Vk+eXJLrMfVH6CCFQNWvP76RV90XHKnT9VMOdaeU6JwOfrteYiwkZjKBxnrjuk0
        npevTPn83cfHjfsi1mPqb1DBiiGPPfdnvSFd861DLQUTXD7drc2e5AKfqqHfSRwhMZWn6Nqq
        Buha/j50wJHXG05rP3x+BqXSYwVdHHFARUWFfEDVFhxqt13l8Bnvq3MO+IaX63I8ikamX5Fo
        OHSyomiYtybLWL/PrHW/ZpUbPhpw/MOj5eXlvliPrr9DV0OcUV5eLmV8I2fIv+qH3+BTpfH1
        rgFXOXxGowomgdPvKyowcAlcNWscrhzz6U8VzjYPTTr4b/XgF19SJCG+oAsgztm09ZmUo7Ul
        93zaeMk1nOPmJndyvkfV0ZpXBNBIPjXd0HSKcfa/l6RVfphvrayYfuf05liPiwgOFawEYevW
        cs0fqr+V4VKSi8DVCUfabBcrkIa4fIaBLkVLU8cu4TDIXkUne+ok8AMlycf2Kj51c5LOXXWd
        sbF+TD9u7JBI0FmeoFRUPG3cj9yhn9VfnK/Tqne0upOGN7pSMsGQpHBZq/bzoCpjKtcw1QvO
        27NN9fWpxpaPHT7zu0VJh4/bLLX7yu4qI5tnAtKvT+o+Bnv5j88XHOkoGnmgtSSfcfU6j6q7
        pt6VmuxVtf3i96yTPTzT0NiiYconXq77T3HS0aqhKUf/OeU7U44BoDBnH6BfnMj9EFa+aZO+
        xnOZXtK1p6ZqXTc1epKvOtpuy1I5K2KM29yKLtWhGBNvIZ+BmzVO1SQ7WjmkKpWzI/mWmtOD
        TLV7vDLeb2o21Wfrqt3lkye7QUWqz5FYJysRFhUVFfJRvTLwVFNW5nFHpsWs9eSbtc6rXD79
        RQ2ulMxGd6pJYjxJZqoFnBsUyBqvqpFUzlj0TxUOWeJcw3yqBNUHBrfKpXZw3p5maHGk6Frr
        9bJ6sN2r26EyzZGLrJX2LGN1w7W5e2qvumqDN8qDI+IEKljEGV792xpzizMtv9WblNvqtA6o
        d2eYqzoG6fSyM9eqtedrNGoWV5GhcDnFq2osblWnV1WmUSBLPlUje1QNU7gG4GASU8EZ41rm
        hcxUDjBVJ3kUvez26iSfS2KKQ2a8VQWauCpXd3gNh73Q1maZ6rwD9B32FLm1OcPaetzGjxy/
        665yWm8iAAD/H9znFIbyhPIQAAAAAElFTkSuQmCC
      </shape>
      <shape name='Flags/zambia.png'>
        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
      </shape>
      <shape name='Flags/zimbabwe.png'>
        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
        gg==
      </shape>
    </shapes>
  </external>
</workbook>
